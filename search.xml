<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022四川省赛Crypto_WP</title>
    <url>/2022/11/17/2022%E5%9B%9B%E5%B7%9D%E7%9C%81%E8%B5%9BCrypto-WP/</url>
    <content><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h5 id="写博客时的本机python环境：python-3-10-x64"><a href="#写博客时的本机python环境：python-3-10-x64" class="headerlink" title="写博客时的本机python环境：python 3.10 x64"></a><em>写博客时的本机python环境：python 3.10 x64</em></h5><h1 id="cry1-babyRSA"><a href="#cry1-babyRSA" class="headerlink" title="cry1-babyRSA"></a>cry1-babyRSA</h1><h3 id="题目附件"><a href="#题目附件" class="headerlink" title="题目附件"></a>题目附件</h3><span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    m  = <span class="string">&quot;&quot;</span></span><br><span class="line">    p  = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">    q  = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">    n  = p * q</span><br><span class="line">    e1 = <span class="number">65537</span></span><br><span class="line">    e2 = <span class="number">1145141</span></span><br><span class="line">    m  = libnum.s2n(m)</span><br><span class="line">    c1 = <span class="built_in">pow</span>(m, e1, n)</span><br><span class="line">    c2 = <span class="built_in">pow</span>(m, e2, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;e1 = <span class="subst">&#123;e1&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;e2 = <span class="subst">&#123;e2&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;c1 = <span class="subst">&#123;c1&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;c2 = <span class="subst">&#123;c2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------ output -------------</span></span><br><span class="line"><span class="comment"># n = 11609263367794994463117283145812710043177521810736993971752031031462916890183901184704668542746877577916588155978013244385351397164066533771160861236441526284927774454246028029331726391203226023580325080150500633513024867014342350030181272221968801196510315424256352865890631054232306002238256568004250127485008008138279976475038656972273740968642332785779132654095393753232949667278798806004585797554024955342308244602767094536835410577382144435188162865642061122467384470501907391577779349252938141732012071206498806107556481558249549513041515803734342211746038126753951345855276903954190730328577080831957273691313</span></span><br><span class="line"><span class="comment"># e1 = 65537</span></span><br><span class="line"><span class="comment"># e2 = 1145141</span></span><br><span class="line"><span class="comment"># c1 = 8279258823057357102846768374381269167364145680055017957250521243478403606503599610855366519746944230676766499525422449675601214010991204564154995560170186683394412090168422510245266135032687364205431432451045158622417794414045719898864520112347836962316252383017549810699146506152781517871135246521405624365475969605452621085531890669372145482824845129281827033881675216546685064514926792907604133415349309151330709913454541960741984877203112442510747386406221828180805888471328964423290560512976977772551838742784356814497777401061881079781523967957560383718977490546677541952293716448514035557723329598904161762173</span></span><br><span class="line"><span class="comment"># c2 = 4995747575438050007737011353038705757162003396847797286289786278729187499823790079035532946676851313055563930519198963823829616599717198622635901839657079748022082189146477789049024407969208203999231434278100203042702919909473619456123328867313626560538182915794195719942071958092695261033449894563006040003298826647287929451919428024895476725340892133852628235964798488419924387986089462246202364608313134686465936926347848518960121189416319175083481701958106210362456062685045840587374473767109533027613795056920007028898921123363733374705988009798831764416119904696307107441325551226052940068337901039381485797771</span></span><br></pre></td></tr></table></figure>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>查看代码和注释掉的运行结果可知：m(密文)未知，已知e1,e2,c1,c2,n</p>
</blockquote>
<blockquote>
<p>分析出是共模攻击-&gt;(RSA模数攻击 当使用公共的模数n,不同的私钥e1, e2对同一密文进行加密时,如果能截获密文c1, c2那么可能可以直接解密。)</p>
</blockquote>
<h6 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">11609263367794994463117283145812710043177521810736993971752031031462916890183901184704668542746877577916588155978013244385351397164066533771160861236441526284927774454246028029331726391203226023580325080150500633513024867014342350030181272221968801196510315424256352865890631054232306002238256568004250127485008008138279976475038656972273740968642332785779132654095393753232949667278798806004585797554024955342308244602767094536835410577382144435188162865642061122467384470501907391577779349252938141732012071206498806107556481558249549513041515803734342211746038126753951345855276903954190730328577080831957273691313</span></span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line">e2 = <span class="number">1145141</span></span><br><span class="line">c1 = <span class="number">8279258823057357102846768374381269167364145680055017957250521243478403606503599610855366519746944230676766499525422449675601214010991204564154995560170186683394412090168422510245266135032687364205431432451045158622417794414045719898864520112347836962316252383017549810699146506152781517871135246521405624365475969605452621085531890669372145482824845129281827033881675216546685064514926792907604133415349309151330709913454541960741984877203112442510747386406221828180805888471328964423290560512976977772551838742784356814497777401061881079781523967957560383718977490546677541952293716448514035557723329598904161762173</span></span><br><span class="line">c2 = <span class="number">4995747575438050007737011353038705757162003396847797286289786278729187499823790079035532946676851313055563930519198963823829616599717198622635901839657079748022082189146477789049024407969208203999231434278100203042702919909473619456123328867313626560538182915794195719942071958092695261033449894563006040003298826647287929451919428024895476725340892133852628235964798488419924387986089462246202364608313134686465936926347848518960121189416319175083481701958106210362456062685045840587374473767109533027613795056920007028898921123363733374705988009798831764416119904696307107441325551226052940068337901039381485797771</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="comment"># n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></span><br><span class="line"><span class="comment"># e1=11187289</span></span><br><span class="line"><span class="comment"># e2=9647291</span></span><br><span class="line">s = gcdext(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = -s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></span><br><span class="line"><span class="comment"># c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></span><br><span class="line"><span class="comment"># e2=9647291</span></span><br><span class="line">c2 = invert(c2, n)</span><br><span class="line">m = (<span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n)) % n</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># print(libnum.n2s(m))</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>

<h6 id="AC"><a href="#AC" class="headerlink" title="AC"></a>AC</h6><h2 id="cry2-russia"><a href="#cry2-russia" class="headerlink" title="cry2-russia"></a>cry2-russia</h2><h3 id="题目附件-1"><a href="#题目附件-1" class="headerlink" title="题目附件"></a>题目附件</h3><!-- more -->

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc1</span>(<span class="params">text</span>):</span><br><span class="line">    enc1_text = base64.b64encode(text.encode())</span><br><span class="line">    enc1_text = enc1_text.decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;enc1: <span class="subst">&#123;enc1_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc2</span>(<span class="params">passwd, text</span>):</span><br><span class="line">    aes = AES.new(passwd.encode(), AES.MODE_ECB)</span><br><span class="line">    enc2_text = aes.encrypt(text.encode())</span><br><span class="line">    enc2_text = base64.b64encode(enc2_text).decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;enc2: <span class="subst">&#123;enc2_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc3</span>(<span class="params">m, n</span>):</span><br><span class="line">    p   = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">    q   = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    e   = <span class="number">3</span></span><br><span class="line">    m   = libnum.s2n(m)</span><br><span class="line">    d   = gmpy2.invert(e, phi)</span><br><span class="line">    c   = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;enc3: <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    enc1_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    enc2_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    flag      = <span class="string">&quot;&quot;</span></span><br><span class="line">    enc1(enc1_text)</span><br><span class="line">    enc2(enc1_text, enc2_text)</span><br><span class="line">    enc3(flag, enc2_text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------ output -------------</span></span><br><span class="line"><span class="comment"># enc1: ZGE2MWU2ZWZmZGU1ZWMyM2JhMjNlMTFkZDA5ZTJiOWQ=</span></span><br><span class="line"><span class="comment"># enc2: NyRexkM90E863Le1zKvYwsScudhxcTxU0yMmzFaTVedpDGe7TUXq1zO/1cmgJ/qf58qSDCGHcgfTYg2DWpXZfopPdB/BgvEQ3C22Y3S5unUsKYqj6OmzRnSn99jAeVrufVJt6/bzYQBF/go1agh8DO9CSdOfcVKxZ4CsK+N7Mq73ENyMjGyYA3SGgFtCliMs7NndpqHP1Df5CKTXLcZmhnmz4M3tz6sHOgsIL2YcwPqx2k6x790X2Gvx9XMMCvqJsM3NABqRtSVf95BCeSxv4DfBFpEOlpAn5wBcWuoZ4NO5fsY0MZkoC3zzwUaXfrs7uxYczpvlRRySwHvLJOtP26dDiNDmccVMS+mZ7UGAVKeH8ppPrDUN1IcEU/5tdCJiAmF4B0tNy1XYa/O/7aRb4KkVX44MCGmKkBrwPD1hYK8HGYMz30qFKKpIykI0w0owJoAKA9/RMAE6Z1V5kgx8v7vZDtLOCOiPptOsru11iihVX+Xgf57BRgifq+nKaX/VFhd9QQClWO86fDQ9ZKiR4uuVZ51AH1FrJeLS3apK9zNsFKzTdJ80KuAGyF6HcrJYyRLqi8ztvPvj2XK4aIg5vhSaT4BWelObxCjI1AQdVbZrJB4lM5R+1br9YB2/ejPTTANIWQB3BDjd8rmppCucLmyrMgLFS37VWSXm8a1f4lS9wmDpxqBsemd38hH5MAg91fEado3gNMEAlPrX8iv6d+wbgsgnNwkft9bxRaHq33/kNIG36zZ4RMh/CXPW4HLlC15PTLgp9CGSDFrydW9wv6Ev/7f/Ah2J6LW3eQdQDf0JaRM0jz1UGO/92oZvlaxOmXV75cpsZGdBZWM7HgMhhw==</span></span><br><span class="line"><span class="comment"># enc3: 2217344750798720137211120200903285462230563024555651912713385064753001965092033686112882615149786798919875318682573208992245531622396450681252127429077764504250880492726521610205619327615972895299175499177769621852123579481687532329488459790907146543801125126149224525924453</span></span><br></pre></td></tr></table></figure>

<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote>
<p>解出B64 Menc1 &#x3D; da61e6effde5ec23ba23e11dd09e2b9d</p>
</blockquote>
<blockquote>
<p>解出AES ..看出是ECB方式(代码里有提示) 不需要参数VI 解出 Menc2即为n</p>
</blockquote>
<blockquote>
<p>RSA小e攻击</p>
</blockquote>
<h6 id="存的脚本"><a href="#存的脚本" class="headerlink" title="存的脚本"></a>存的脚本</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="comment">## -*- coding: utf-8 -*-#</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line">n = <span class="number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span></span><br><span class="line">c = <span class="number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = iroot(c+k*n,e)  <span class="comment">#c+k*n 开3次方根 能开3次方即可</span></span><br><span class="line">    <span class="comment">#print(res)</span></span><br><span class="line">    <span class="comment">#res = (mpz(13040004482819713819817340524563023159919305047824600478799740488797710355579494486728991357), True)</span></span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>]))) <span class="comment">#转为字符串</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k=k+<span class="number">1</span></span><br><span class="line"><span class="comment">#b&#x27;flag&#123;25df8caf006ee5db94d48144c33b2c3b&#125;</span></span><br><span class="line"><span class="comment"># 套上本题数据</span></span><br><span class="line"><span class="comment"># flag&#123;9c049aaf965667626961f2ab6024fd7a&#125;</span></span><br></pre></td></tr></table></figure>

<h6 id="AC-1"><a href="#AC-1" class="headerlink" title="AC"></a>AC</h6><h2 id="暂存一道练手re无关Cry"><a href="#暂存一道练手re无关Cry" class="headerlink" title="暂存一道练手re无关Cry"></a>暂存一道练手re无关Cry</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> aFKWOXZUPFVMDGH[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">102</span>,  <span class="number">10</span>, <span class="number">107</span>,  <span class="number">12</span>, <span class="number">119</span>,  <span class="number">38</span>,  <span class="number">79</span>,  <span class="number">46</span>,  <span class="number">64</span>,  <span class="number">17</span>, </span><br><span class="line">  <span class="number">120</span>,  <span class="number">13</span>,  <span class="number">90</span>,  <span class="number">59</span>,  <span class="number">85</span>,  <span class="number">17</span>, <span class="number">112</span>,  <span class="number">25</span>,  <span class="number">70</span>,  <span class="number">31</span>, </span><br><span class="line">  <span class="number">118</span>,  <span class="number">34</span>,  <span class="number">77</span>,  <span class="number">35</span>,  <span class="number">68</span>,  <span class="number">14</span>, <span class="number">103</span>,   <span class="number">6</span>, <span class="number">104</span>,  <span class="number">15</span>, </span><br><span class="line">   <span class="number">71</span>,  <span class="number">50</span>,  <span class="number">79</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string s = <span class="string">&quot;f&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> ;i &lt; <span class="number">33</span>;i ++) &#123;</span><br><span class="line">        std::cout &lt;&lt; (<span class="type">char</span>)(aFKWOXZUPFVMDGH[i] ^ aFKWOXZUPFVMDGH[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>2022_重庆市赛WP_cry1</title>
    <url>/2022/12/08/2022-%E9%87%8D%E5%BA%86%E5%B8%82%E8%B5%9BWP-cry1/</url>
    <content><![CDATA[<h3 id="n和Q求最大公约数拿到q，P直接开立方拿到p，n整除p和q拿到r"><a href="#n和Q求最大公约数拿到q，P直接开立方拿到p，n整除p和q拿到r" class="headerlink" title="n和Q求最大公约数拿到q，P直接开立方拿到p，n整除p和q拿到r"></a>n和Q求最大公约数拿到q，P直接开立方拿到p，n整除p和q拿到r</h3><h3 id="或者求解q时可以"><a href="#或者求解q时可以" class="headerlink" title="或者求解q时可以"></a>或者求解q时可以</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eq = Euler(Q) = Euler(q**2) 求q-&gt; sqrt(Euler(q**2)) + 1 = q</span></span><br><span class="line"><span class="comment"># EQQ = gmpy2.iroot(Eq, 2)[0] # 求平方根</span></span><br><span class="line"><span class="comment"># q = EQQ + 1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Euler对于任意 互质 的整数a和b有性质f(a b) &#x3D; f(a) ⋅ f(b)</p>
</blockquote>
<span id="more"></span>

<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">r=getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q*r</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Euler</span>(<span class="params">x</span>):</span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,x):</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(i,x)==<span class="number">1</span>:</span><br><span class="line">            res+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">P=p**<span class="number">3</span></span><br><span class="line">Q=q**<span class="number">2</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line"><span class="built_in">print</span>(Euler(Q))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#P = 1686761823519516525084824311416810253107853832929411677237594989001281261421956188747941222367576127569696216513071075733130132251383529469095077597202999362675041210639065389821237728348981344440193122126487447235175127680730304754656661704596111547454161716607787386914764780833658069534913186485846587027674567133467341836048413431174183101579802349498153899249182793495245916757355079598668221097821452488627067390724198617676379698358212167618567704428433303</span></span><br><span class="line"><span class="comment">#Eq = 54800501457630149544580145188029519076092032026436445384163914536965196942938808746487258773679836358732387355329080483568564046906919385574994390974732491368590525875801103056613954297623835159311237599961507385582029709732950222118171961946571285930711702624160354541459438994349318149872111029043942485620</span></span><br><span class="line"><span class="comment">#c = 568846080701555049788706647255668980211679838950729382006912035332305772256748203239331545262283165739670330060735508231578298253855583985677482008855909565463834639005910652510802915373310537390293061001384655286359323437737989289787972131460392977341024828530868508329336263146882773903176326250063921456707975853839017504122823304303509269793133132036479219404842827556015566627129747816769486873563843578029479179692030808518925753268233301452280242586076493</span></span><br><span class="line"><span class="comment">#n = 1069981867450019752454430625015273180922733107799929958042241890002915414684562764186875387471850290817321430141222917656674447229697676236077201897275059270515637506529666384968535578683380559782336910645306992981172862940944536463561840412558764760962107958365575095435157363812028759723055357681895134974760386884254380189603418912937553755099672511307377054933171384741715642510754214768859689909974996095149155241791151425031489280537907842378844226410097051</span></span><br></pre></td></tr></table></figure>

<h3 id="gcd-方法"><a href="#gcd-方法" class="headerlink" title="$gcd$ 方法"></a>$gcd$ 方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">r = <span class="number">12142261002625479270959358223863571062295429117378994112396394259314721874267081158944354513358164889564741712782226613341612447412750073385958464420872713</span></span><br><span class="line">c = <span class="number">568846080701555049788706647255668980211679838950729382006912035332305772256748203239331545262283165739670330060735508231578298253855583985677482008855909565463834639005910652510802915373310537390293061001384655286359323437737989289787972131460392977341024828530868508329336263146882773903176326250063921456707975853839017504122823304303509269793133132036479219404842827556015566627129747816769486873563843578029479179692030808518925753268233301452280242586076493</span></span><br><span class="line">n = <span class="number">1069981867450019752454430625015273180922733107799929958042241890002915414684562764186875387471850290817321430141222917656674447229697676236077201897275059270515637506529666384968535578683380559782336910645306992981172862940944536463561840412558764760962107958365575095435157363812028759723055357681895134974760386884254380189603418912937553755099672511307377054933171384741715642510754214768859689909974996095149155241791151425031489280537907842378844226410097051</span></span><br><span class="line"><span class="comment"># p = gmpy2.iroot(P, 3)[0] # 开3次方根</span></span><br><span class="line">p = <span class="number">11903771663059518341912645066042582267678745214691121272332269847512624178064427789028954264701292914161793272471217879550653909080475237446747964043276487</span></span><br><span class="line"><span class="comment"># q = gmpy2.gcd(n,Eq)</span></span><br><span class="line">q = <span class="number">7402736079155473279000574596031490410671021795687853893698348179857428763438305848933328416647633118223876785823588566614584124350907811192587130096357221</span></span><br><span class="line">phi = (q - <span class="number">1</span>) * (p - <span class="number">1</span>) * (r - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># phi = (q - 1) * (p - 1)</span></span><br><span class="line"><span class="comment"># n = q * p</span></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi) <span class="comment"># 求逆元 d = e**-1 mod phi</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>

<h3 id="拿到q-p-r-n的三个因子-后也可以只用q-p-不用r-构造出新的phi-d和n来解密-数学底力不足，有的题不能这样操作，原因暂时未知，挖坑先"><a href="#拿到q-p-r-n的三个因子-后也可以只用q-p-不用r-构造出新的phi-d和n来解密-数学底力不足，有的题不能这样操作，原因暂时未知，挖坑先" class="headerlink" title="拿到q p r (n的三个因子) 后也可以只用q p (不用r) 构造出新的phi, d和n来解密(数学底力不足，有的题不能这样操作，原因暂时未知，挖坑先)"></a>拿到q p r (n的三个因子) 后也可以只用q p (不用r) 构造出新的phi, d和n来解密(数学底力不足，有的题不能这样操作，原因暂时未知，挖坑先)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">q = <span class="number">7402736079155473279000574596031490410671021795687853893698348179857428763438305848933328416647633118223876785823588566614584124350907811192587130096357221</span></span><br><span class="line">p = <span class="number">11903771663059518341912645066042582267678745214691121272332269847512624178064427789028954264701292914161793272471217879550653909080475237446747964043276487</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">r = <span class="number">12142261002625479270959358223863571062295429117378994112396394259314721874267081158944354513358164889564741712782226613341612447412750073385958464420872713</span></span><br><span class="line">c = <span class="number">568846080701555049788706647255668980211679838950729382006912035332305772256748203239331545262283165739670330060735508231578298253855583985677482008855909565463834639005910652510802915373310537390293061001384655286359323437737989289787972131460392977341024828530868508329336263146882773903176326250063921456707975853839017504122823304303509269793133132036479219404842827556015566627129747816769486873563843578029479179692030808518925753268233301452280242586076493</span></span><br><span class="line">n = <span class="number">1069981867450019752454430625015273180922733107799929958042241890002915414684562764186875387471850290817321430141222917656674447229697676236077201897275059270515637506529666384968535578683380559782336910645306992981172862940944536463561840412558764760962107958365575095435157363812028759723055357681895134974760386884254380189603418912937553755099672511307377054933171384741715642510754214768859689909974996095149155241791151425031489280537907842378844226410097051</span></span><br><span class="line"><span class="comment"># phi = (q - 1) * (p - 1) * (r - 1)</span></span><br><span class="line">phi = (q - <span class="number">1</span>) * (p - <span class="number">1</span>)</span><br><span class="line">n = q * p</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>

<h3 id="sqrt-Eq"><a href="#sqrt-Eq" class="headerlink" title="$sqrt(Eq)$"></a>$sqrt(Eq)$</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#by sangge’s code</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Euler</span>(<span class="params">x</span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, x):</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(i, x) == <span class="number">1</span>:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16进制转字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_str1</span>(<span class="params">s</span>):</span><br><span class="line">    s = binascii.unhexlify(s) <span class="comment"># ASCII 码转换函数</span></span><br><span class="line">    <span class="comment"># unhexlify()传入的参数也可以是b&#x27;xxxx&#x27;(xxxx要符合16进制特征)</span></span><br><span class="line">    <span class="keyword">return</span> s.decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># s的类型是bytes类型，用encode()方法转化为str类型(去除b&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">P = <span class="number">1686761823519516525084824311416810253107853832929411677237594989001281261421956188747941222367576127569696216513071075733130132251383529469095077597202999362675041210639065389821237728348981344440193122126487447235175127680730304754656661704596111547454161716607787386914764780833658069534913186485846587027674567133467341836048413431174183101579802349498153899249182793495245916757355079598668221097821452488627067390724198617676379698358212167618567704428433303</span></span><br><span class="line">EQ = <span class="number">54800501457630149544580145188029519076092032026436445384163914536965196942938808746487258773679836358732387355329080483568564046906919385574994390974732491368590525875801103056613954297623835159311237599961507385582029709732950222118171961946571285930711702624160354541459438994349318149872111029043942485620</span></span><br><span class="line">c = <span class="number">568846080701555049788706647255668980211679838950729382006912035332305772256748203239331545262283165739670330060735508231578298253855583985677482008855909565463834639005910652510802915373310537390293061001384655286359323437737989289787972131460392977341024828530868508329336263146882773903176326250063921456707975853839017504122823304303509269793133132036479219404842827556015566627129747816769486873563843578029479179692030808518925753268233301452280242586076493</span></span><br><span class="line">n = <span class="number">1069981867450019752454430625015273180922733107799929958042241890002915414684562764186875387471850290817321430141222917656674447229697676236077201897275059270515637506529666384968535578683380559782336910645306992981172862940944536463561840412558764760962107958365575095435157363812028759723055357681895134974760386884254380189603418912937553755099672511307377054933171384741715642510754214768859689909974996095149155241791151425031489280537907842378844226410097051</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = gmpy2.iroot(P, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># Euler对于任意 互质 的整数a和b有性质f ( a b ) = f ( a ) ⋅ f ( b )</span></span><br><span class="line">Eq = gmpy2.iroot(EQ, <span class="number">2</span>)[<span class="number">0</span>] <span class="comment"># 求平方根</span></span><br><span class="line">q = Eq + <span class="number">1</span></span><br><span class="line">r = n//p//q <span class="comment"># 求整数除法</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>) * (r - <span class="number">1</span>) <span class="comment"># 求欧拉函数</span></span><br><span class="line">d = gmpy2.invert(e, phi_n) <span class="comment"># 求逆元</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n) <span class="comment"># 求模幂</span></span><br><span class="line"><span class="comment"># print(m)</span></span><br><span class="line">flag = hex_to_str1(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]) <span class="comment"># 不会附带 b&#x27;&#x27; 与下方转换类似(# 转化为16进制 后去掉前面的0x 后转化为str类型)</span></span><br><span class="line"><span class="comment"># flag = long_to_bytes(m) # 会附带 b&#x27;&#x27; 可以像上面一样再转一次str</span></span><br><span class="line"><span class="built_in">print</span>(flag[<span class="number">5</span>:-<span class="number">1</span>]) <span class="comment"># 去掉前后的flag&#123;&#125; ,下面继续进行题意要求的md5加密</span></span><br><span class="line"><span class="built_in">hash</span> = hashlib.md5() <span class="comment"># md5加密</span></span><br><span class="line"><span class="built_in">hash</span>.update(flag[<span class="number">5</span>:-<span class="number">1</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># encode()方法将str类型转化为bytes类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span> + <span class="built_in">hash</span>.hexdigest() + <span class="string">&quot;&#125;&quot;</span>) <span class="comment"># hexdigest()方法将bytes类型转化为str类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>![q的推导.png]]</p>
]]></content>
      <tags>
        <tag>数学 Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>AirDrop主题密码题Wp</title>
    <url>/2022/08/26/AirDrop%E4%B8%BB%E9%A2%98%E5%AF%86%E7%A0%81%E9%A2%98Wp/</url>
    <content><![CDATA[<p>一道AirDrop主题密码题wp</p>
<h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><blockquote>
<p>小A鼓起勇气向女神索要电话号码，但女神一定要考考他。女神说她最近刚看了一篇发表于安全顶会USENIX Security 2021的论文，论文发现苹果AirDrop隔空投送功能的漏洞，该漏洞可以向陌生人泄露AirDrop发起者或接收者的电话号码和电子邮箱。小A经过一番努力，获得了女神手机在AirDrop时传输的手机号哈希值，但再往下就不会了，你能继续帮助他吗？小A只记得女神手机号是170号段首批放号的联通号码。Hash：c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc<br>flag格式：flag{13位电话号码（纯数字，含国家代码）}</p>
</blockquote>
<hr>
<span id="more"></span>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li><p>尝试随波逐流暴力破解 -&gt; 无果</p>
</li>
<li><p>尝试重新阅读题面 -&gt; 女神号码前五位为 +86 170(去掉加号)(看见两位区域码+联通 直觉反应是cn号段了)</p>
</li>
<li><p>直接Google <em>这篇论文</em> 还真查到了 <a href="https://www.usenix.org/conference/usenixsecurity21/presentation/heinrich">PrivateDrop: Practical Privacy-Preserving Authentication for Apple AirDrop | USENIX</a> (好长不想看)</p>
</li>
<li><p>继续找线索 <a href="https://eprint.iacr.org/2021/893">另一篇文章</a> 说明了简单解密原理 关键字段如下</p>
</li>
<li><blockquote>
<p>Privacy and security implications include the possibility of conducting<br>advanced spear phishing attacks or deploying multiple “collector”<br>devices in order to build databases that map contact identifiers to<br>specific locations. For our proof-of-concept, we leverage a custom<br>rainbow table construction to reverse SHA-256 hashes of phone numbers in<br> a matter of milliseconds.</p>
</blockquote>
</li>
<li><p>尝试 了解彩虹表</p>
</li>
<li><p>突然看到这篇Blog(题面 求13位 已知5位 13-5 &#x3D; 8 但是密文是13位翻译来的 那试试能不能提供片段破解)</p>
</li>
<li><p><img src="https://github.com/n-WN/Htmlnoob/blob/main/img/2022-08-26-11-36-01-image.png?raw=true"></p>
</li>
<li><p>因为是电话号码 所以生成 13位 0-9 的彩虹表</p>
<p>理论上生成的 表 前五位可以确定为 86170</p>
<p>于是可以只生成 8位 0-9 组成的彩虹表，接着批处理加入 86170 的前缀</p>
</li>
<li><table>
<thead>
<tr>
<th>由此图大约判断出题者提供的hash为</th>
<th>sha256(utf16le($pass))</th>
</tr>
</thead>
</table>
<p><img src="https://github.com/n-WN/Htmlnoob/blob/main/img/2022-08-26-13-01-13-image.png?raw=true"></p>
</li>
</ol>
<h4 id="彩虹表"><a href="#彩虹表" class="headerlink" title="彩虹表"></a>彩虹表</h4><blockquote>
<p><a href="http://blog.chinaunix.net/uid-28811518-id-5715259.html">科普：彩虹表破解开机密码、MD5算法等的原理-bjutslg-ChinaUnix博客</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.cnblogs.com/lsdb/p/10038835.html">暴力破解和彩虹表攻击的区别与联系 - 诸子流 - 博客园</a></p>
<blockquote>
<p>暴力破解和彩虹表攻击宽泛来说都属于口令破解，但他们使用的场景完全是不一样的。</p>
<p>暴力破解：完全不知道密码—-通过系统提供的认证接口不断认证—-获取原始口令—-处于进入系统前</p>
<p>彩虹表攻击：已知密码hash值—-通过自己的工具及彩虹表不断查找—-获取原始口令—-处理进入系统后</p>
</blockquote>
</blockquote>
<p>暴力粗略估算10天左右，也知道密码hash值，于是采用彩虹表方案(到目前为止我还是不知道彩虹表怎么用)</p>
<blockquote>
<p>杂谈：<a href="http://www.adayinthelifeof.nl/2011/02/02/password-hashing-and-salting/">Password hashing and salting</a></p>
</blockquote>
<blockquote>
<h6 id="Q-破解一个散列的电话号码容易吗？"><a href="#Q-破解一个散列的电话号码容易吗？" class="headerlink" title="Q:破解一个散列的电话号码容易吗？"></a>Q:破解一个散列的电话号码容易吗？</h6><p>我想对电话号码进行 SHA256 哈希处理以隐藏它们。这是一个好主意吗？有没有其他方法可以使这个安全？</p>
<h6 id="最佳回答"><a href="#最佳回答" class="headerlink" title="最佳回答"></a>最佳回答</h6><p>不，散列电话号码不是一个好主意。电话号码数量有限，因此对手很容易尝试对所有电话号码进行哈希处理。然后您可以简单地将每个哈希值与存储的哈希值进行比较。通常，您不必处理所有电话号码，而只需处理一部分电话号码（针对特定国家或逻辑上不同的其他组）。</p>
<p>您可以使用带有盐和工作因子的慢速密码散列，但这只会意味着所需的时间乘以一个大的恒定值。它不会改变操作顺序。如果子集足够小，它可能无法阻止对手执行所有必要的计算。</p>
<p>在这种情况下，您可能需要加密电话号码。或者使用密钥散列，例如 HMAC。对于这两个选项，您都需要对密钥执行密钥管理；这并不像散列数字那么容易。</p>
</blockquote>
<blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1180135">利用彩虹表破解Hash - 腾讯云开发者社区-腾讯云</a></p>
</blockquote>
<blockquote>
<p>youtu-&gt;此漏洞演示视频<a href="https://youtu.be/sFEUlmcj36k">USENIX Security ‘21 - PrivateDrop: Practical Privacy-Preserving Authentication for Apple AirDrop - YouTube</a></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">rtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index chain_len chain_num part_index</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结合题意和已知信息做出如下命令</span></span><br><span class="line">rtgen sha256 numeric <span class="number">13</span> <span class="number">13</span> <span class="number">0</span> <span class="number">10000000</span> <span class="number">10000000</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>参数含义</strong><img src="https://github.com/n-WN/Htmlnoob/blob/main/img/2022-08-26-14-20-39-image.png?raw=true"></p>
<p>但是生成了很久也没出来 应该是长宽太大了</p>
<p>后来pl师傅说可以直接用hashcat搜后7-8位</p>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.\hashcat.exe -m 1400 -a 3 c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc 86170?d?d?d?d?d?d?d?d</span><br></pre></td></tr></table></figure>
</blockquote>
<p>1s 出结果</p>
<p><img src="https://github.com/n-WN/Htmlnoob/blob/main/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-08-26%20182932.png?raw=true" alt="屏幕截图 20220826 182932png"></p>
<h1 id="结论：直接用-hashcat-比彩虹表快（至少这道题如此"><a href="#结论：直接用-hashcat-比彩虹表快（至少这道题如此" class="headerlink" title="结论：直接用 hashcat 比彩虹表快（至少这道题如此"></a>结论：直接用 hashcat 比彩虹表快（至少这道题如此</h1><p><em>最后：为什么上面说可以只查七位呢？–见下图</em></p>
<p><img src="https://github.com/n-WN/Htmlnoob/blob/main/img/2022-08-26-19-44-21-image.png?raw=true"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>HWS-easyRSA-Wp</title>
    <url>/2022/08/30/HWS-easyRSA-Wp/</url>
    <content><![CDATA[<p>from <em>Kotori</em> 学长の小测验</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># seed = bytes_to_long(flag)</span></span><br><span class="line">bits = seed.bit_length()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = getPrime(bits + <span class="number">1</span>) </span><br><span class="line">    <span class="keyword">if</span> p &gt; seed:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line">a = getRandomRange(<span class="number">1</span>, p)</span><br><span class="line">b = getRandomRange(<span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    seed = (a * seed + b) % p</span><br><span class="line">    <span class="built_in">print</span>(seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 31893593182018727625473530765941216190921866039118147474754069955393226712079257707838327486268599271803</span></span><br><span class="line"><span class="comment"># 25820280412859586557218124484272275594433027771091486422152141535682739897353623931875432576083022273940</span></span><br><span class="line"><span class="comment"># 24295465524789348024814588142969609603624462580932512051939198335014954252359986260009296537423802567677</span></span><br><span class="line"><span class="comment"># 14963686422550871447791815183480974143372785034397446416396172429864269108509521776424254168481536292904</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>RSA的计算过程是：</p>
</blockquote>
<ul>
<li>任选两个大质数p和q，p!&#x3D;q，计算N&#x3D;pq</li>
<li>计算N的欧拉函数r(n)&#x3D;(p-1)(q-1)</li>
<li>任选一个e满足 <strong>1&lt;e&lt;r(n)</strong> ,且e与r(n)互质</li>
<li>找到d，使e*d&#x2F;r(n)&#x3D;x……1（x是多少不重要，重要的是余数为1）后丢弃p，</li>
<li>至此（n，e）为公钥，（n，d）为私钥</li>
<li>加密：C&#x3D;Me(mod n)；解密：M&#x3D;Cd（mod n）</li>
</ul>
<blockquote>
<p>下述推导来自 (<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/">RSA 介绍 - CTF Wiki</a>)</p>
</blockquote>
<h3 id="消息加密-¶"><a href="#消息加密-¶" class="headerlink" title="消息加密 ¶"></a>消息加密 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/#_3" title="Permanent link">¶</a></h3><p>首先需要将消息 以一个双方约定好的格式转化为一个小于 N，且与 N 互质的整数 m。如果消息太长，可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：</p>
<p>$$<br>m^{e}\equiv c\pmod N<br>$$</p>
<h3 id="消息解密-¶"><a href="#消息解密-¶" class="headerlink" title="消息解密 ¶"></a>消息解密 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/#_4" title="Permanent link">¶</a></h3><p>利用密钥 d​ 进行解密。</p>
<p>$$<br>c^{d}\equiv m\pmod N<br>$$</p>
<h3 id="正确性证明-¶"><a href="#正确性证明-¶" class="headerlink" title="正确性证明 ¶"></a>正确性证明 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/#_5" title="Permanent link">¶</a></h3><p>即我们要证$m^{ed} \equiv m \bmod N$，已知$ed \equiv 1 \bmod \phi(N)$，那么 $ed&#x3D;k\phi(N)+1$，即需要证明</p>
<p>$$<br>m^{k\phi(N)+1} \equiv m \bmod N<br>$$</p>
<p>这里我们分两种情况证明</p>
<p>第一种情况 $gcd(m,N)&#x3D;1​$，那么 $m^{\phi(N)} \equiv 1 \bmod N​$，因此原式成立。</p>
<p>第二种情况 $gcd(m,N)\neq 1$，那么 $m$ 必然是 $p$ 或者 $q$ 的倍数，并且 $n&#x3D;m$ 小于 $N$。我们假设</p>
<p>$$<br>m&#x3D;xp<br>$$</p>
<p>那么 x 必然小于 q，又由于 q 是素数。那么</p>
<p>$$<br>m^{\phi(q)} \equiv 1 \bmod q<br>$$</p>
<p>进而</p>
<p>$$<br>m^{k\phi(N)}&#x3D;m^{k(p-1)(q-1)}&#x3D;(m^{\phi(q)})^{k(p-1)} \equiv 1 \bmod q<br>$$</p>
<p>那么</p>
<p>$$<br>m^{k\phi(N)+1}&#x3D;m+uqm<br>$$</p>
<p>进而</p>
<p>$$<br>m^{k\phi(N)+1}&#x3D;m+uqxp&#x3D;m+uxN<br>$$</p>
<p>所以原式成立。</p>
<hr>
<h4 id="逆元运算-拓展欧几里得算法"><a href="#逆元运算-拓展欧几里得算法" class="headerlink" title="逆元运算 (拓展欧几里得算法)"></a>逆元运算 (<a href="https://zhuanlan.zhihu.com/p/51481046">拓展欧几里得算法</a>)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模板题博客下面拿到的结论</span></span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>] <span class="comment">#逆元计算</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>给了n和10次lcg的output序列</p>
<p>用公式：<strong>a&#x3D;((Xn+2-Xn+1)(Xn+1-Xn)-1)%n</strong></p>
<p>题面给出了n &amp; output</p>
<p>用已知信息可以求出 <em>a</em><br>再用a，output序列，n求出b<br>根据output序列第一个反推出初始seed<br>最后使用 long_to_bytes() 函数 转为字符串即可得到flag</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n =  <span class="number">31893593182018727625473530765941216190921866039118147474754069955393226712079257707838327486268599271803</span></span><br><span class="line">output =  [</span><br><span class="line">    <span class="number">25820280412859586557218124484272275594433027771091486422152141535682739897353623931875432576083022273940</span>,</span><br><span class="line">    <span class="number">24295465524789348024814588142969609603624462580932512051939198335014954252359986260009296537423802567677</span>,</span><br><span class="line">    <span class="number">14963686422550871447791815183480974143372785034397446416396172429864269108509521776424254168481536292904</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># print(output[0])</span></span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>] <span class="comment">#逆元计算</span></span><br><span class="line">a = (output[<span class="number">2</span>] - output[<span class="number">1</span>])*MMI((output[<span class="number">1</span>] - output[<span class="number">0</span>]),n) % n</span><br><span class="line">ani = MMI(a,n)</span><br><span class="line">b = (output[<span class="number">1</span>] - a * output[<span class="number">0</span>]) % n</span><br><span class="line">seed = (ani*(output[<span class="number">0</span>]-b)) % n</span><br><span class="line">plaintext = seed</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(plaintext))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="%5Bctf%E4%B9%8Blcg%E7%AE%97%E6%B3%95_%E5%B0%8F%E5%81%A5%E5%81%A5%E5%81%A5%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/superprintf/article/details/108964563)">lcg算法模板</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>PWHhub2022冬季赛密码学习</title>
    <url>/2022/12/20/PWHhub2022%E5%86%AC%E5%AD%A3%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="cry1のWP-大杂烩暂时挖坑"><a href="#cry1のWP-大杂烩暂时挖坑" class="headerlink" title="cry1のWP, 大杂烩暂时挖坑"></a>cry1のWP, 大杂烩暂时挖坑</h3><span id="more"></span>

<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">R = getPrime(<span class="number">256</span>)</span><br><span class="line">S = getPrime(<span class="number">512</span>)</span><br><span class="line">A = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">N = R * S * A</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">0x10001</span>, N) <span class="comment"># c = m^e mod N</span></span><br><span class="line"></span><br><span class="line">RA = R &amp; A</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;RSA1&#x27;</span>,<span class="built_in">hex</span>(RA * S))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;RSA2&#x27;</span>,<span class="built_in">hex</span>(RA | S))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>, <span class="built_in">hex</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N&#x27;</span>,<span class="built_in">hex</span>(N))</span><br><span class="line"></span><br><span class="line"><span class="comment"># RSA1 0x97be543979cb98c109103fa118c1c930ff13a6b2562166417021afd6e46cb0837a5cc5f4094fcea5fcc33efdfa495050e0fb8269922b3ee2d403210ed1ba339af2dc3d4e8952f0c784fcc655436cf255b98cdaf8080df47f6c28bc0bae68c713</span></span><br><span class="line"><span class="comment"># RSA2 0xa887aa84f3a0bd8b79ed59a7bb98d8e58a85414f85cf2ddf53ff4bd9294bfdadf7d6d6adfe7fbed55fc71b5a6bfcfe79ced27e2f41e7546a8679daf5b63dda37</span></span><br><span class="line"><span class="comment"># c 0x2f62fb7e7e8e27823193119f8412050ade9084ade25261a5875da23a07d5d5145e72d460697984d8aa668a25822009a4fdc85df2b208941cd3219b312f21c3c7bc4ef7aa8c18b4f91a0e815fe1892fca0f72406e571fbd0fea2c4710c601165ccd7e8a5a828721a5e2c956b732223d683d1413ef393b5f80a431c52bf9099e22b8e27daafb9d3e055242b89b5419b8925744ccf348e1bea519225af8efe7dbcc202425251039cbfe6b892a7fcf7e9d72224ea9381e3fb32ab837139af4b4112a3c7a6571c88e7d6c5db4c3f91e25edd15eb5544ef2f29a9e1bb1062ec86f1902</span></span><br><span class="line"><span class="comment"># N 0x58a7ff25292651e1a8d82656d64fe3b458d6e688405e85aa6c02e0c33469ad3dbaef6c6eaf8faf22f2d15e80856ab7b90a40fd50c36f7b59932bc94e6fb4fabefa87b11bf4ef74df4ccf8d254f0c6812628df3c5b3786af35e3dde9c87b462d1a565af6f100750718ccb7235174947f00cec5836765150f1680d0c58a5f9ea2473a6033c218c75664dc53377dde9386f37e1a89d77e61a716129d290c5a41f81cd3490bab6fe51f232ab27cb1ac9c8eb88e908c12109a125b7439c25b6879283a17a3467823fbb089709eb836cfd03386cc4bf186eb45401472ab0bdec605fd7</span></span><br></pre></td></tr></table></figure>

<h3 id="非预期解-因-N-与-rsa1-中存在公因子-S-直接gcd-rsa1-N-求出S-又因为-S-gt-m-于是-S-直接当做-N-使用"><a href="#非预期解-因-N-与-rsa1-中存在公因子-S-直接gcd-rsa1-N-求出S-又因为-S-gt-m-于是-S-直接当做-N-使用" class="headerlink" title="非预期解(因$N$与$rsa1$中存在公因子$S$, 直接gcd(rsa1, N) 求出S, 又因为 $S &gt; m$ 于是 $S$ 直接当做 $N$ 使用"></a>非预期解(因$N$与$rsa1$中存在公因子$S$, 直接<code>gcd(rsa1, N)</code> 求出S, 又因为 $S &gt; m$ 于是 $S$ 直接当做 $N$ 使用</h3><h4 id="Q-为什么这里的-S-可以当作-N-使用呢"><a href="#Q-为什么这里的-S-可以当作-N-使用呢" class="headerlink" title="Q: 为什么这里的 $S$ 可以当作 $N$ 使用呢"></a>Q: 为什么这里的 $S$ 可以当作 $N$ 使用呢</h4><h4 id="A-这里因为-m-比-S-小-所以在模-S-和模-N-下加密程序-c-x3D-m-e-mod-N-求出来的-c-是一样的-于是把-S-当-N-算"><a href="#A-这里因为-m-比-S-小-所以在模-S-和模-N-下加密程序-c-x3D-m-e-mod-N-求出来的-c-是一样的-于是把-S-当-N-算" class="headerlink" title="A: 这里因为 $m$ 比 $S$ 小, 所以在模 $S$ 和模 $N$ 下加密程序( $c &#x3D; m^e mod N$ )求出来的 $c$ 是一样的, 于是把 $S$ 当 $N$ 算"></a>A: 这里因为 $m$ 比 $S$ 小, 所以在模 $S$ 和模 $N$ 下加密程序( $c &#x3D; m^e mod N$ )求出来的 $c$ 是一样的, 于是把 $S$ 当 $N$ 算</h4><h4 id="可以理解为因为加密公式为-m-e-mod-n-膜的数学小技巧为-c-x3D-m-e-mod-n-等同于-c＝-m-mod-n-e-所以在-S＞m-s-是-n-的一个因子-的时候-S-可以直接接做-N-使用"><a href="#可以理解为因为加密公式为-m-e-mod-n-膜的数学小技巧为-c-x3D-m-e-mod-n-等同于-c＝-m-mod-n-e-所以在-S＞m-s-是-n-的一个因子-的时候-S-可以直接接做-N-使用" class="headerlink" title="可以理解为因为加密公式为 $m^e mod n$ , 膜的数学小技巧为 $c &#x3D; m^e mod n$ 等同于 $c＝(m mod n)^e$ , 所以在 $S＞m$ ( $s$ 是 $n$ 的一个因子) 的时候,  $S$ 可以直接接做 $N$ 使用"></a>可以理解为因为加密公式为 $m^e mod n$ , 膜的数学小技巧为 $c &#x3D; m^e mod n$ 等同于 $c＝(m mod n)^e$ , 所以在 $S＞m$ ( $s$ 是 $n$ 的一个因子) 的时候,  $S$ 可以直接接做 $N$ 使用</h4><h6 id="问了些师傅-个人想法-如果有错请联系我更正谢谢！"><a href="#问了些师傅-个人想法-如果有错请联系我更正谢谢！" class="headerlink" title="问了些师傅 + 个人想法, 如果有错请联系我更正谢谢！"></a>问了些师傅 + 个人想法, 如果有错请联系我更正谢谢！</h6><h5 id="非预期解法code"><a href="#非预期解法code" class="headerlink" title="非预期解法code"></a>非预期解法code</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from sage.all import *</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">rsa1 = <span class="number">0x97be543979cb98c109103fa118c1c930ff13a6b2562166417021afd6e46cb0837a5cc5f4094fcea5fcc33efdfa495050e0fb8269922b3ee2d403210ed1ba339af2dc3d4e8952f0c784fcc655436cf255b98cdaf8080df47f6c28bc0bae68c713</span></span><br><span class="line">rsa2 = <span class="number">0xa887aa84f3a0bd8b79ed59a7bb98d8e58a85414f85cf2ddf53ff4bd9294bfdadf7d6d6adfe7fbed55fc71b5a6bfcfe79ced27e2f41e7546a8679daf5b63dda37</span></span><br><span class="line">c = <span class="number">0x2f62fb7e7e8e27823193119f8412050ade9084ade25261a5875da23a07d5d5145e72d460697984d8aa668a25822009a4fdc85df2b208941cd3219b312f21c3c7bc4ef7aa8c18b4f91a0e815fe1892fca0f72406e571fbd0fea2c4710c601165ccd7e8a5a828721a5e2c956b732223d683d1413ef393b5f80a431c52bf9099e22b8e27daafb9d3e055242b89b5419b8925744ccf348e1bea519225af8efe7dbcc202425251039cbfe6b892a7fcf7e9d72224ea9381e3fb32ab837139af4b4112a3c7a6571c88e7d6c5db4c3f91e25edd15eb5544ef2f29a9e1bb1062ec86f1902</span></span><br><span class="line">N = <span class="number">0x58a7ff25292651e1a8d82656d64fe3b458d6e688405e85aa6c02e0c33469ad3dbaef6c6eaf8faf22f2d15e80856ab7b90a40fd50c36f7b59932bc94e6fb4fabefa87b11bf4ef74df4ccf8d254f0c6812628df3c5b3786af35e3dde9c87b462d1a565af6f100750718ccb7235174947f00cec5836765150f1680d0c58a5f9ea2473a6033c218c75664dc53377dde9386f37e1a89d77e61a716129d290c5a41f81cd3490bab6fe51f232ab27cb1ac9c8eb88e908c12109a125b7439c25b6879283a17a3467823fbb089709eb836cfd03386cc4bf186eb45401472ab0bdec605fd7</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S = gcd(N, rsa2) 因为 rsa1 和 N 都有相同的因子 (S == Because both rsa1 and N has same factor S. by BaakingDog</span></span><br><span class="line">S = gcd(N, rsa1)</span><br><span class="line"><span class="comment"># 这里想尝试分解pq, p*q太大未遂</span></span><br><span class="line"><span class="comment"># print(N//S)</span></span><br><span class="line"><span class="comment"># 非预期解 常规解法应该求出N的全部因子 (R, A) 然后d = e^-1 mod phi(N); m = c^d mod N (明文就求出来了)</span></span><br><span class="line"><span class="comment"># 而这里因为m比s小, 所以在模n和模s下求出来的m是一样的, 于是把s当n算</span></span><br><span class="line">d = inverse(e, S - <span class="number">1</span>) <span class="comment"># d = e^-1 mod phi(N) 求逆元</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, S) <span class="comment"># 把s当n算 m = c^d mod N</span></span><br><span class="line"><span class="built_in">print</span>(S &gt; m) <span class="comment"># True 加以验证</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])) <span class="comment"># 转为字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(long_to_bytes(m)) # 另一种转为字符的方式</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/31/hello-world/</url>
    <content><![CDATA[<p><strong>Theme Quick Start</strong></p>
<span id="more"></span>

<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>博客搭建与主题</tag>
      </tags>
  </entry>
  <entry>
    <title>N皇后</title>
    <url>/2022/05/05/N%E7%9A%87%E5%90%8E-%E8%8B%B1%E9%9B%84%E5%93%AA%E9%87%8C%E5%87%BA%E6%9D%A5/</url>
    <content><![CDATA[<h4 id="BV14Y4y1C7SW"><a href="#BV14Y4y1C7SW" class="headerlink" title="BV14Y4y1C7SW"></a>BV14Y4y1C7SW</h4><span id="more"></span>

<p>以下是错误代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> hash[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doAdd</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> c, <span class="type">int</span> n, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span> || r &gt;= n) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c &lt; <span class="number">0</span> || c &gt;= n) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    hash[r][c] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> c, <span class="type">int</span> n, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">doAdd</span>(r, i, n, val);</span><br><span class="line">        <span class="built_in">doAdd</span>(i, c, r, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">doAdd</span>(r + <span class="number">1</span>, c + <span class="number">1</span>, n, val)</span><br><span class="line">        <span class="built_in">doAdd</span>(r - <span class="number">1</span>, c - <span class="number">1</span>, n, val)</span><br><span class="line">        <span class="built_in">doAdd</span>(r + <span class="number">1</span>, c - <span class="number">1</span>, n, val)</span><br><span class="line">        <span class="built_in">doAdd</span>(r - <span class="number">1</span>, c + <span class="number">1</span>, n, val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> depth, <span class="type">int</span> maxDepth)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (depth == maxDepth) &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; maxDepth; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash[depth][i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">add</span>(depth, i, maxDepth, i);</span><br><span class="line">            <span class="built_in">dfs</span>(depth + <span class="number">1</span>, maxDepth);</span><br><span class="line">            <span class="built_in">add</span>(depth, i, maxDepth, -i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(hash, <span class="number">0</span>, <span class="built_in">sizeof</span>(hash));</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> PACK6;</span><br><span class="line"><span class="comment">// https://www.bilibili.com/video/BV14Y4y1C7SW</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">N</span>皇后 &#123;</span><br><span class="line">    <span class="comment">// 首先定义一个哈希表 hash ij大于0 表示这个位置不能放皇后</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 定义全局变量cnt 表示方案数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doADD</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> c, <span class="type">int</span> n, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果行的范围越越界则标记无效</span></span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span> || r &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果列的范围越越界则标记无效</span></span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">0</span> || c &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果对应位置是安全的，也就是没有皇后能够攻击到，则标记为1</span></span><br><span class="line"><span class="comment">//        (否则在对应位置的hash数组执行标记)</span></span><br><span class="line">        <span class="keyword">if</span> (hash[r][c] == <span class="number">0</span>) &#123;</span><br><span class="line">            hash[r][c] = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    实现放置皇后的过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> r,<span class="type">int</span> c ,<span class="type">int</span> n,<span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="comment">//        val = 1; // 代表(r,c)位置放置了一个皇后</span></span><br><span class="line"><span class="comment">//        val = -1; // 代表(r,c)位置取出了一个皇后</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 每放入一个皇后,需要将他所在的行，所在的列，所在的对角线 都进行标记</span></span><br><span class="line">            doADD(r, i, n, val); <span class="comment">// 标记所在行</span></span><br><span class="line">            doADD(i, c, n, val); <span class="comment">// 标记所在列</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">// 标记主对角线</span></span><br><span class="line">            doADD(r + i, c + i, n, val);</span><br><span class="line">            doADD(r - i, c - i, n, val);</span><br><span class="line">            <span class="comment">// 标记副对角线</span></span><br><span class="line">            doADD(r + i, c - i, n, val);</span><br><span class="line">            doADD(r - i, c + i, n, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> depth, <span class="type">int</span> maxDepth)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前要放置的行号和总共要放置的行数</span></span><br><span class="line">        <span class="comment">// 如果当前行数==总行数 方案数+1 函数直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (depth == maxDepth) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在当前行的每一列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxDepth; i++) &#123;</span><br><span class="line"><span class="comment">//            如果发现有对应位置是安全的，也就是没有皇后能够攻击到，</span></span><br><span class="line">            <span class="keyword">if</span> (hash[depth][i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//                则调用add放置一个皇后</span></span><br><span class="line">                add(depth, i, maxDepth, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//                递归求解下一行</span></span><br><span class="line">                dfs(depth + <span class="number">1</span>, maxDepth);</span><br><span class="line"><span class="comment">//                递归退出后，删除放置的皇后(取回前面放置的皇后)</span></span><br><span class="line">                add(depth, i, maxDepth, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fakeMain</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="comment">//        初始化cnt = 0;</span></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//        初始化hash ij = 0,表示一开始一个空的棋盘</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                hash[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        递归模拟每一行放置皇后后的情况</span></span><br><span class="line">        dfs(<span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fakeMain(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> hash[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现标记</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">doAdd</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> c, <span class="type">int</span> n, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果行的范围越界 则标记失败</span></span><br><span class="line">        <span class="keyword">if</span> (r &lt; <span class="number">0</span> || r &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果列的范围越界 则标记失败</span></span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">0</span> || c &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则在对应的位置上的hash数组执行标记</span></span><br><span class="line">        hash[r][c] += val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现放置皇后的过程</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> r,<span class="type">int</span> c,<span class="type">int</span> n,<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">doAdd</span>(r,i,n,val);</span><br><span class="line">            <span class="built_in">doAdd</span>(i,c,r,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 标记主对角线</span></span><br><span class="line">            <span class="built_in">doAdd</span>(r+i,c+i,n,val);</span><br><span class="line">            <span class="built_in">doAdd</span>(r-i,c-i,n,val);</span><br><span class="line">            <span class="comment">// 标记副对角线</span></span><br><span class="line">            <span class="built_in">doAdd</span>(r+i,c-i,n,val);</span><br><span class="line">            <span class="built_in">doAdd</span>(r-i,c+i,n,val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> depth, <span class="type">int</span> maxDepth)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">if</span>(depth == maxDepth) &#123;</span><br><span class="line">            ++cnt;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; maxDepth; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[depth][i] == <span class="number">0</span>) <span class="comment">//对应位置安全，没有皇后能攻击到</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 则调用add放置一个皇后</span></span><br><span class="line">                <span class="built_in">add</span>(depth, i, maxDepth , <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 递归求解下一行</span></span><br><span class="line">                <span class="built_in">dfs</span>(depth + <span class="number">1</span>, maxDepth);</span><br><span class="line">                <span class="comment">// 递归推出后，取出皇后</span></span><br><span class="line">                <span class="built_in">add</span>(depth, i, maxDepth, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(hash, <span class="number">0</span>, <span class="built_in">sizeof</span>(hash));</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>,n);</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>没做出来</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA基础公式&amp;正确性证明</title>
    <url>/2022/12/08/RSA%E5%9F%BA%E7%A1%80%E5%85%AC%E5%BC%8F-%E6%AD%A3%E7%A1%AE%E6%80%A7%E8%AF%81%E6%98%8E/</url>
    <content><![CDATA[<h2 id="基本原理-¶"><a href="#基本原理-¶" class="headerlink" title="基本原理 ¶"></a>基本原理 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/?h=rsa#_1" title="Permanent link">¶</a></h2><h3 id="公钥与私钥的产生-¶"><a href="#公钥与私钥的产生-¶" class="headerlink" title="公钥与私钥的产生 ¶"></a>公钥与私钥的产生 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/?h=rsa#_2" title="Permanent link">¶</a></h3><span id="more"></span>
<ol>
<li>随机选择两个不同大质数 $p$ 和 $q$，计算  $N&#x3D;p×q$</li>
<li>根据欧拉函数，求得 $φ(N)&#x3D;φ(p)φ(q)&#x3D;(p−1)(q−1)$ </li>
<li>选择一个小于 $φ(N)$ 的整数 $e$，使 $e$ 和 $φ(N)$ 互质。并求得 $e$ 关于 $φ(N)$ 的模反元素，命名为 $d$，有 $ed≡1(modφ(N))$</li>
<li>将 $p$​ 和 $q$​ 的记录销毁</li>
</ol>
<p>此时，$(N,e)$ 是公钥，$(N,d)$ 是私钥。</p>
<h3 id="消息加密-¶"><a href="#消息加密-¶" class="headerlink" title="消息加密 ¶"></a>消息加密 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/?h=rsa#_3" title="Permanent link">¶</a></h3><p>首先需要将消息 以一个双方约定好的格式转化为一个小于 $N$，且与 $N$ 互质的整数 $m$ 。如果消息太长，可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：</p>
<p>$$me≡c(modN)$$</p>
<h3 id="消息解密-¶"><a href="#消息解密-¶" class="headerlink" title="消息解密 ¶"></a>消息解密 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/#_4" title="Permanent link">¶</a></h3><p>利用密钥 $d$​ 进行解密。</p>
<p>$$cd≡m(modN)$$</p>
<h2 id="共模攻击-¶"><a href="#共模攻击-¶" class="headerlink" title="共模攻击 ¶"></a>共模攻击 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/#_7" title="Permanent link">¶</a></h2><h3 id="攻击条件-¶"><a href="#攻击条件-¶" class="headerlink" title="攻击条件 ¶"></a>攻击条件 <a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/#_8" title="Permanent link">¶</a></h3><p>当两个用户使用相同的模数 N、不同的私钥时，加密同一明文消息时即存在共模攻击。<br>#题目链接 <a href="https://buuoj.cn/challenges#SameMod">BUU-SameMod</a></p>
<p>$$\left{\begin{matrix}<br>    c1&#x3D;m^{e1}modN\<br>    c2&#x3D;m^{e2}modN<br>\end{matrix}\right.$$<br>当攻击者截获 $c1$ 和 $c2$ 后，就可以恢复出明文。用扩展欧几里得算法求出 $re1+se2&#x3D;1modn$ 的两个整数 $r$ 和 $s$，由此可得：<br>$$\begin{align}<br>    c^r_1c^s_2≡&amp;M^{re1}M^{se2}modN \<br>    ≡&amp;M^{re1+se2}modN \<br>    ≡&amp;MmodN<br>\end{align}$$<br><a href="obsidian://open?vault=Obsidian%20Vault&file=RSA%E8%A7%A3%E5%AF%86%E6%8A%80%E5%B7%A7">python技巧</a><br>[[RSA解密技巧]]<br>[[z3库解方程 &amp; mpz()超高精度]]<br><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_theory/">CTFwiki_RSA</a></p>
]]></content>
      <tags>
        <tag>数学 Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>my-first-blog</title>
    <url>/2022/03/31/my-first-blog/</url>
    <content><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/pulls"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome"></a></p>
<p><strong>How To Ask Questions The Smart Way</strong></p>
<span id="more"></span>



<p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p>
<p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p>
<p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr&#x2F;faqs&#x2F;smart-questions.html</a></p>
<p>Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p>
<p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin</a> 所翻译版本的最新翻译；</p>
<p>协助指出翻译问题，<strong>请<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/issues/new">发 issue</a>，或直接<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/compare">发 pull request</a> 给我。</strong></p>
<p>本文另有<a href="README.md">繁體中文版</a>。</p>
<h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="history.md">原文版本历史</a></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E5%A3%B0%E6%98%8E">声明</a></li>
<li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li>
<li><a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">在提问之前</a></li>
<li><a href="#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6">当你提问时</a><ul>
<li><a href="#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B">慎选提问的论坛</a></li>
<li><a href="#stack-overflow">Stack Overflow</a></li>
<li><a href="#%E7%BD%91%E7%AB%99%E5%92%8C-irc-%E8%AE%BA%E5%9D%9B">网站和 IRC 论坛</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8">第二步，使用项目邮件列表</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98">使用有意义且描述明确的标题</a></li>
<li><a href="#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D">使问题容易回复</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%B8%85%E6%99%B0%E3%80%81%E6%AD%A3%E7%A1%AE%E3%80%81%E7%B2%BE%E5%87%86%E4%B8%94%E5%90%88%E4%B9%8E%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5">使用清晰、正确、精准且合乎语法的语句</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98">使用易于读取且标准的文件格式发送问题</a></li>
<li><a href="#%E7%B2%BE%E7%A1%AE%E5%9C%B0%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9">精确地描述问题并言之有物</a></li>
<li><a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a></li>
<li><a href="#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0-bug">别动辄声称找到 Bug</a></li>
<li><a href="#%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%E4%B8%8D%E8%83%BD%E4%BB%A3%E6%9B%BF%E4%BD%A0%E7%9A%84%E5%8A%9F%E8%AF%BE">低声下气不能代替你的功课</a></li>
<li><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E4%BD%A0%E7%9A%84%E7%8C%9C%E6%B5%8B">描述问题症状而非你的猜测</a></li>
<li><a href="#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6">按发生时间先后列出问题症状</a></li>
<li><a href="#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B">描述目标而不是过程</a></li>
<li><a href="#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D">别要求使用私人电邮回复</a></li>
<li><a href="#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82">清楚明确的表达你的问题以及需求</a></li>
<li><a href="#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6">询问有关代码的问题时</a></li>
<li><a href="#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5">别把自己家庭作业的问题贴上来</a></li>
<li><a href="#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5">去掉无意义的提问句</a></li>
<li><a href="#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5">即使你很急也不要在标题写紧急</a></li>
<li><a href="#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9">礼多人不怪，而且有时还很有帮助</a></li>
<li><a href="#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E">问题解决后，加个简短的补充说明</a></li>
</ul>
</li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88">如何解读答案</a><ul>
<li><a href="#rtfm-%E5%92%8C-stfw%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86">RTFM 和 STFW：如何知道你已完全搞砸了</a></li>
<li><a href="#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82">如果还是搞不懂</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94">处理无礼的回应</a></li>
</ul>
</li>
<li><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85">如何避免扮演失败者</a></li>
<li><a href="#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98">不该问的问题</a></li>
<li><a href="#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98">好问题与蠢问题</a></li>
<li><a href="#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94">如果得不到回答</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98">如何更好地回答问题</a></li>
<li><a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90">相关资源</a></li>
<li><a href="#%E9%B8%A3%E8%B0%A2">鸣谢</a></li>
</ul>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助&#x2F;说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p>
<p><strong>本指南不提供此项目的实际支持服务！</strong></p>
<p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p>
<p>如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件或硬件问题的人处取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p>
<p>现在开源（Open Source）软件已经相当盛行，您通常可以从其他更有经验的用户那里获得与黑客一样好的答案，这是件<strong>好事</strong>；和黑客相比，用户们往往对那些新手常遇到的问题更宽容一些。尽管如此，以我们在此推荐的方式对待这些有经验的用户通常也是从他们那里获得有用答案的最有效方式。</p>
<p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。</p>
<p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p>
<p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p>
<p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p>
<p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情地滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效地利用时间来回答<code>赢家（winner）</code>的问题。</p>
<p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p>
<p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p>
<p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p>
<p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p>
<h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p>
<ol>
<li>尝试在你准备提问的论坛的旧文章中搜索答案。</li>
<li>尝试上网搜索以找到答案。</li>
<li>尝试阅读手册以找到答案。</li>
<li>尝试阅读常见问题文件（FAQ）以找到答案。</li>
<li>尝试自己检查或试验以找到答案。</li>
<li>向你身边的强者朋友打听以找到答案。</li>
<li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li>
</ol>
<p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p>
<p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href="http://groups.google.com/">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p>
<p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p>
<p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p>
<p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>，一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p>
<p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p>
<p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p>
<h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p>
<ul>
<li>在与主题不合的论坛上贴出你的问题。</li>
<li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li>
<li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li>
<li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li>
</ul>
<p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p>
<p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p>
<p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。</p>
<p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p>
<p>别像机关枪似的一次“扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p>
<p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p>
<p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p>
<p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者由于涌入其私人邮箱的大量不堪忍受的无用邮件而不再提供支持。</p>
<h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong>在 Stack Exchange 问。</p>
<p>近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p>
<p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的几率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p>
<p>Stack Exchange 已经成长到<a href="https://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p>
<ul>
<li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li>
<li>Stack Overflow 是问写程序有关的问题。</li>
<li>Server Fault 是问服务器和网管相关的问题。</li>
</ul>
<h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的用户群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表），这些都是开始提问的好地方，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p>
<p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复“使用<strong>我们的</strong>版本”。</p>
<p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p>
<p>通过论坛或 IRC 频道来提供用户支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p>
<p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p>
<h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p>
<ul>
<li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，那这也不能成为骚扰个别开发者的理由。</li>
<li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li>
<li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其他人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li>
<li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li>
</ul>
<p>如果一个项目既有“用户”也有“开发者”（或“黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p>
<p>然而，如果你<strong>确信</strong>你的问题很特别，而且在“用户”列表或论坛中几天都没有回复，可以试试前往“开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p>
<p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p>
<h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p>
<p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p>
<blockquote>
<p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p>
</blockquote>
<blockquote>
<p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p>
</blockquote>
<blockquote>
<p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p>
</blockquote>
<p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p>
<p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p>
<p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p>
<p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许用户按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p>
<p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p>
<p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p>
<h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p>
<p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p>
<h3 id="使用清晰、正确、精准且合乎语法的语句"><a href="#使用清晰、正确、精准且合乎语法的语句" class="headerlink" title="使用清晰、正确、精准且合乎语法的语句"></a><a name="使用清晰、正确、精准且合乎语法的语句">使用清晰、正确、精准且合乎语法的语句</a></h3><p>我们从经验中发现，粗心的提问者通常也会粗心地写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p>
<p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p>
<p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a> 也许可以这样做，但你不行）。</p>
<p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/%E5%B0%8F%E7%99%BD">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/%E7%81%AB%E6%98%9F%E6%96%87">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p>
<p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂的语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p>
<p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p>
<blockquote>
<p>English is not my native language; please excuse typing errors.</p>
</blockquote>
<ul>
<li>英文不是我的母语，请原谅我的错字或语法。</li>
</ul>
<blockquote>
<p>If you speak $LANGUAGE, please email&#x2F;PM me;<br>I may need assistance translating my question.</p>
</blockquote>
<ul>
<li>如果你说<strong>某语言</strong>，请向我发电邮&#x2F;私信；</li>
<li>我需要有人协助我翻译我的问题。</li>
</ul>
<blockquote>
<p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p>
</blockquote>
<ul>
<li>我对技术名词很熟悉，但对于俗语或是特别用法不甚了解。</li>
</ul>
<blockquote>
<p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p>
</blockquote>
<ul>
<li>我把我的问题用<strong>某语言</strong>和英文写出来。</li>
<li>如果你只用其中的一种语言回答，我会乐意将回复翻译成为你使用的语言。</li>
</ul>
<h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p>
<ul>
<li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭 HTML</a> 并不难）。</li>
<li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li>
<li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li>
<li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志文件拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li>
<li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li>
<li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li>
<li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li>
<li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li>
</ul>
<p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p>
<h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul>
<li>仔细、清楚地描述你的问题或 Bug 的症状。</li>
<li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li>
<li>描述在提问前你是怎样去研究和理解这个问题的。</li>
<li>描述在提问前为确定问题而采取的诊断步骤。</li>
<li>描述最近做过什么可能相关的硬件或软件变更。</li>
<li>尽可能地提供一个可以<code>重现这个问题的可控环境</code>的方法。</li>
</ul>
<p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能提出的问题回答一遍。</p>
<p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p>
<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p>
<h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p>
<p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p>
<h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p>
<p>请记得，还有其他许多用户没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p>
<p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p>
<p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p>
<h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p>
<p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p>
<p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p>
<h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p>
</blockquote>
<p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p>
<h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p>
<p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p>
<p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p>
<h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p>
<p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的 RGB 值？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的 RGB 值。</p>
</blockquote>
<p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p>
<h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p>
<p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于不可能使其他人产生兴趣。</p>
<p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p>
<h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p>
<p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p>
<p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p>
<p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好地理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p>
<h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p>
<p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p>
<p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p>
<p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p>
<h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p>
<p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户群组，论坛或（最后一招）在项目的<strong>用户</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的用户也许仍会给你一些提示。</p>
<h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p>
<p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p>
<p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p>
<p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="https://strcat.de/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p>
<h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p>
<p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p>
<p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛茸茸的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛茸茸的小海豹很重要。</p>
<p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p>
<h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p>
<p>坦白说，这一点并没有比使用清晰、正确、精准且合乎语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p>
<p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p>
<p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p>
<h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p>
<p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p>
<p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p>
<p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p>
<p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p>
<p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p>
<p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p>
<p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p>
<h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="rtfm"></a></p>
<h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM（Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p>
<p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 **<a href="http://lmgtfy.com/">Google 是你的朋友</a>**！）</p>
<p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p>
<p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p>
<ul>
<li><strong>你需要的信息非常容易获得</strong>；</li>
<li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li>
</ul>
<p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p>
<h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p>
<p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p>
<h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直截了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p>
<p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p>
<p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p>
<p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。）</p>
<p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html">tact filters</a></strong>)。</p>
<p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p>
<h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中，你以本指南所描述的或类似的方式，可能会有那么几次搞砸了。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p>
<p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、不去关马桶盖等等。相反地，你该这么做：</p>
<p>熬过去，这很正常。事实上，它是有益健康且合理的。</p>
<p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p>
<p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p>
<p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p>
<p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p>
<p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p>
<p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p>
<p>也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p>
<h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p>
<p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p>
<p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p>
<p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p>
<p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？</a></p>
<p>问题：<a href="#q5">我的程序&#x2F;设定&#x2F;SQL 语句没有用</a></p>
<p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p>
<p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q9">我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</a></p>
<hr>
<p><a id="q1"></a></p>
<blockquote>
<p>问题：我能在哪找到 X 程序或 X 资源？</p>
</blockquote>
<p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="https://www.google.com/">Google</a> 吗？</p>
<p><a id="q2"></a></p>
<blockquote>
<p>问题：我怎样用 X 做 Y？</p>
</blockquote>
<p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p>
<p><a id="q3"></a></p>
<blockquote>
<p>问题：如何设定我的 shell 提示？？</p>
</blockquote>
<p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p>
<p><a id="q4"></a></p>
<blockquote>
<p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？</p>
</blockquote>
<p>回答：试试看就知道了。如果你试过，你就知道了答案，就不用浪费我的时间了。</p>
<p><a id="q5"></a></p>
<blockquote>
<p>问题：我的{程序&#x2F;设定&#x2F;SQL 语句}没有用</p>
</blockquote>
<p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p>
<ul>
<li>你还有什么要补充的吗？</li>
<li>真糟糕，希望你能搞定。</li>
<li>这关我屁事？</li>
</ul>
<p><a id="q6"></a></p>
<blockquote>
<p>问题：我的 Windows 电脑有问题，你能帮我吗？</p>
</blockquote>
<p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p>
<p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题，只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p>
<p><a id="q7"></a></p>
<blockquote>
<p>问题：我的程序不会动了，我认为系统工具 X 有问题</p>
</blockquote>
<p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p>
<p><a id="q8"></a></p>
<blockquote>
<p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p>
</blockquote>
<p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到用户群组的清单）。</p>
<p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地用户群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p>
<p><a id="q9"></a></p>
<blockquote>
<p>问题：我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</p>
</blockquote>
<p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p>
<h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p>
</blockquote>
<p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p>
</blockquote>
<p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p>
</blockquote>
<p>他觉得都是别人的错，这个傲慢自大的提问者。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p>
</blockquote>
<p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我的主机板有问题了，谁来帮我？</p>
</blockquote>
<p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p>
</blockquote>
<p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p>
<p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p>
<p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p>
<p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p>
<p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候，一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p>
<p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p>
<h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p>
<p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p>
<p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p>
<p>有许多网上的以及本地的用户群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p>
<p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p>
<p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名用户。根本不可能由一个人来处理来自上万名用户的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p>
<h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点。</strong> 问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p>
<p><strong>对初犯者私下回复。</strong> 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p>
<p><strong>如果你不确定，一定要说出来！</strong> 一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p>
<p><strong>如果帮不了忙，也别妨碍他。</strong> 不要在实际步骤上开玩笑，那样也许会毁了提问者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p>
<p><strong>试探性的反问以引出更多的细节。</strong> 如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p>
<p>尽管对那些懒虫抱怨一声 RTFM 是正当的，但能给出文档的链接（即使只是建议个 Google 搜索关键词）会更好。</p>
<p><strong>如果你决定回答，就请给出好的答案。</strong> 当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。</p>
<p><strong>正面地回答问题！</strong> 如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p>
<p><strong>帮助你的社区从问题中学习。</strong> 当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p>
<p>如果你在研究一番后才作出了回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p>
<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix 系统和网络基本原理</a>。</p>
<p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>
]]></content>
      <tags>
        <tag>这是一个tags测试</tag>
      </tags>
  </entry>
  <entry>
    <title>代码本-数组入门</title>
    <url>/2022/05/25/%E4%BB%A3%E7%A0%81%E6%9C%AC-%E6%95%B0%E7%BB%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="AcWing-数组的部分"><a href="#AcWing-数组的部分" class="headerlink" title="AcWing 数组的部分"></a>AcWing 数组的部分</h2><span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;t);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> q[<span class="number">12</span>][<span class="number">12</span>]; <span class="comment">// 初始化后全部读入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">12</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">12</span>; j ++ )</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;q[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> s = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; #(i - <span class="number">1</span>)#；j ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                s += q[i][j];</span><br><span class="line">                c += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &lt;= <span class="number">10</span> ;i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= #(<span class="number">10</span> - i)#; j ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                s += q[i][j];</span><br><span class="line">                c += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( t == <span class="string">&#x27;S&#x27;</span>) <span class="built_in">printf</span> (<span class="string">&quot;%.1lf\n&quot;</span>,s);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.1lf\n&quot;</span>, s / c );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>代码,C++</tag>
      </tags>
  </entry>
  <entry>
    <title>rCTF2022密码学习</title>
    <url>/2022/12/15/rCTF2022%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h5 id="碎碎念："><a href="#碎碎念：" class="headerlink" title="碎碎念："></a>碎碎念：</h5><blockquote>
<p>rCTF一Misc题(feedback)flag就在给的链接里 但只有1&#x2F;7的队伍做出来<br>令人唏嘘</p>
<blockquote>
<p>ezPVZ应该第二关需要单独修改数据且如果发现不是所修改的数据应该还原回修改前的状态，或者使用时间齿轮，不然会闪退</p>
</blockquote>
</blockquote>
<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><blockquote>
<p>guess</p>
<blockquote>
<p>Can you guess it? OwO<br>nc 190.92.234.114 23334</p>
</blockquote>
</blockquote>
<h2 id="Crypto-guess-payload是f61d写的-加了些注释方便自己学习-非预期解"><a href="#Crypto-guess-payload是f61d写的-加了些注释方便自己学习-非预期解" class="headerlink" title="Crypto_guess_payload是f61d写的 加了些注释方便自己学习, 非预期解"></a>Crypto_guess_payload是f61d写的 加了些注释方便自己学习, 非预期解</h2><blockquote>
<p>Thr — 2022&#x2F;12&#x2F;17 04:31</p>
<blockquote>
<p>If you just stare at the guess challenge, you can’t understand the intent because it doesn’t work exactly as author intended<br>It was expected to be a difficult challenge, but due to a stupid mistake, the solution is very simple</p>
</blockquote>
</blockquote>
<blockquote>
<p>Shadowwws — 2022&#x2F;12&#x2F;17 01:59</p>
<blockquote>
<p>this is rctf_ in increasing order by ascii value<br>Tr:这是按 ascii 值递增顺序排列的 rctf_</p>
</blockquote>
</blockquote>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># nc 190.92.234.114 23334</span></span><br><span class="line"><span class="string">控制台测试后返回的结果</span></span><br><span class="line"><span class="string">q = 791985421179360689560703292714936952174214706011</span></span><br><span class="line"><span class="string">T = [687389374070793745608366173478847219133847752342, 148590987283476044133101935375756165664783673752, 784392004785393404485830658895671207295260347718, 235022566135895330511553214902835196820734396613, 16218048682530523514225399085269661293528606569, 788874394822905148540107611798233724443767953932, 15269640353640111378997754170382041458989544553, 30886132099470743925485139708047885189639441574, 532788759672326845559913320275260749880181539579, 662140136411549634985066770585710914277832755203, 117066081828359056986114035139023801093078750722, 684475140743747781984169837795870167223794167462, 179498553567808393768939433049295644610117602432, 393982000294754398306780674368422917365011955241, 31796929643669670050880466265900216198619636710, 250790178362771218697794903975549256318799040292, 747104066998256925123412873324651199898520327580, 451239066708254897614717171993474979080838707483, 114819318350415279179997506867421609982087283622, 73840617095420511181676972086303868313741827818, 121689020309766913504856401840433099812155795942, 386367671563453771080486215551961490187141071188, 605026913996676793242873719734852463953582583289, 789107510266866575423558418737430032413362987082, 262653761971162958214390304326209982811981655483, 15310006345664873449925474785704428687793880201, 711070944168345655472710171081018642056489401961, 772592061455002063411227661074527421616128511859, 267436376509814049006455202892609058372860757044, 613728623311273878401399549846204826258987284023, 730859104098445325072320673938479353660625003944, 613076697578822110540196439202612114174674394895, 661142732741960454238883381927920740639398459593, 213239100206145828369936380257487889913507439022, 105670467078782480704992401679932214405980493586, 392190013580106344891470079352622555135040493932, 426850371433861625664450692728596526913013081637, 323064802925362396328824176654583697357911510238, 550561691173711236641598158962801373467135473786, 765276108794413757399949760082346692135776673154, 538739836386265479423914663703941494202025819949, 386796731718487395681678208096630359590125803655, 293167264481502671761181616963858983508746436412, 620172260844788849968537485129937722989031659492, 463584821266055916079985709538233601600564876204,</span></span><br><span class="line"><span class="string">     126095290614894269309948363290984138215143753669, 114401599786639801568460901327861781266292576007, 500142845606317140469931246824912993833861238964, 686888217977664505793890871364195175592509400052, 546838778470030355696129335937096151735479284476, 18354766489874630467046006175271857636422573480, 366047662932711672149621633445066064765288396864, 603055642650093117113233464452229122868635575890, 270224257074219398914219496533148577051570247329, 125002405344117886394194303190596310509688869137, 70201301887963774951225786457996357972031708472, 82668695511202372302087976909922010982275534484, 635935477069788764042322625434595558804224881696, 757846477696211668794763728472403936813270022806, 208475044917038905862193592195625297647984045191, 91168103025941478066462612459475250973455567140, 40855195748235855149410324860643052535409655176, 228962740599413128638754393025724129159651687437, 370183179151359464712545324218891653886503779495, 513137243380566726892064282317503839965413954351, 445034878483775072558491813149478776689819671518, 127027507310966119804804411760272287009965037570, 722391156067789383135351106918663079877699216864, 618266096061811454287696379984084640943371516398, 724876542116949198330706934003286540762576529604, 433501905574672335845296042705106819485897114913, 518810714058517824604960149242050166262356143760, 699486964938388550986876611796749730497168927766, 786499166491365310745821258021462696978230695264, 378632707569584052495256755673680823406023051368, 297390843388625627654106641020691327511712918756, 199167537340346661738887864127173042263453128549, 304011275786865506832270143495748884997275651595, 524368827420566653849937001847082000130061500564, 133202414389835135825011149299308307042933709489, 102819181636508442192906918253885287780402893696, 127102817960317821491381946718817446847824278438, 16247832800609837350480819429445804404244000386, 366703243501494269716871191893004520785061515489, 531663072026633098954739544851070620242098088015, 481796734664890505884764143567925822468228952314, 592557595496256433486314149473892838712753186521, 334786893534330951913803578304874431562278353561, 701934288388191323390258074961301466712044243205, 377494803775243176859218689144245091510048037224]</span></span><br><span class="line"><span class="string">U = [193091050308013228888464448608678526694981857425501392082021669772895880970949164286878404412853, 41739937920419613937133725174405437312068910952826383829015527345072851118958742107833783257025, 220339565565674700248384022862624632042605531176988129632271448910687544998979892989274944546002, 66018992805365652530088480511015121575750189318998553292758419106125563377656535187488036458805, 4555729506714475088218535100332606280025688191594125299525375731970465350564650010198134914507, 221598690936070925305831886763926718643308646257221105087539901766169969085726659931442761256828, 4289316950375690335532244549978472897610709675814156887010050375173610466846708233125224367189, 8676066159883112252012436825903073173375187645493212611382736104352576889421081424187026421939, 149662978623289032540176447406991125813030589224739553876382825999023859422508843694040500939757, 185998415473949045989371142948827156998468660170599512468762165507012624899596294763686351432815, 32884437188512110265665583171396802031810504480657934264446179848685966503384505709480509656224, 192272427857349672978253211529337343845919395424281645442977717629628624546926819085427786468517, 50422025048073748667775647116572587725356246017098578465959312006226044894472335676425969508119, 110671478362904189744679580111891265569627353114532357478131448201377168648047668153036660246359, 8931913662130386362317175115063281559584911729326313147047008500814425785029977656315706231636, 70448192500011175210213426125388756816334592613779616001782458443970924407648252182009598294239, 209865200754797484255850789972615589264831171553724282215307522210866596240706456996003576086991, 126755269454792449970564345777012158014591745505213801991643344610208130176372175140011083603760, 32253310295786577772564131488980145764307549734977005724922122092992916182727252047466935481436, 20742191904872486628241813824494779831279573052065503778446720425507037861198990769348616583072, 34183043306901774972460615555190129723447736824047641000657009810241507193500947208394604297977, 108532576035377231133483751447191773072471647977062571802471216498293766236427965832426224715391, 169955030867559728443429577190165063088663904786463588889439224977690389800205508988456430136786, 221664174208893375003554847461288224621961331778357543329735565692844481896141617081258808204772, 73780731386661709289931935682796368548402929650633918613972354248274854920793736358744713937951, 4300655955735385440675890343536316386662955423123833757136600820526426279516391006570630212582, 199743319626636997015328192373733333098764718256437942981400718817361551552948542556167741777106, 217024903545592844480461473089800142688397372860459847330410448426303204965797673827011138264897, 75124191293551984687730781638824107422501576303545699242587243986461988372687547774248128499778, 172399383740051947369706943256513951682363397764731154587156751173963152975067501819126930707260, 205301910912298001929342524424557279017679419786805968312136499241851931687028288151057945732320, 172216254600803763002477411312096142432450013777944627478258114086934258801653196297468648592084, 185718239885837311773960876494308523769602572341749872034431315279651672918397151003466633728322, 59899910267306283997647254307520520134056360955043957316958807599002887916139518331552664600102, 29683353052063688053531915920244298818239976621209751387892722957825904292397790704877871585838, 110168100495975215914097591221204193405169663253138903900698413731663579242420180325650836644178, 119904365201958197399193077552809208315379269327248139416883131967370890107986313650602624946252, 90750489413275339291973067835520043251744959389260061138875824346043310838020976725744986269707, 154655482348406622890741390312346921540770373087533194730069129252021364161170049829391905104329, 214969816521377057695799114545830902750274358997099204957902300275283836824084418481631765537286, 151334665292451343218541973461434187404086216985323559694530060104424979516674529351103911516018, 108653101139642560000377907782264046849880816268917307218897300104913245161695182568065176842444, 82352124065319690094786265619789871830070053770164274400051967602392238372358365362687580570281, 174209433161942489242982638649860723463927792619187297109989507850149786483970744634202818172316, 130223252528626274698029142445607536191776328429990453648790917375640058404662070288096233531706,</span></span><br><span class="line"><span class="string">     35420786270717835649094670034551057453676230149896369743559450532051933854933834214351638415602, 32135971100193695507998401864238643703546409600858307810797546097316686019442935323810095045145, 140492581068348432198760748700997294862899596648506206411833200791980185614416439211336963364949, 192950273100740572878362101890086998448051794536825368032496641644723094958351433977358629282393, 153609697890172109171710927410362352574040782238498745250976523483262903319086087788592205520647, 5155944030236360719821729909438710460622430840257607361843887086779949505629032157319751104296, 102824585838290193204943949641230950674498696380347845223802880184168900336410402960504261341697, 169401291067219532502823996817195535977880230518458260479645600146215333753543381290638347142175, 75907320632788591907214993275691240856015768939608991056221850983850926515025105859763013458350, 35113789432011050872175046396633056539174031156267821118481855948573947118670865074401614706173, 19719890393797086002115198232713136516087972017329642402023185169689315148781746048749029964134, 23222042478368932853162654666288434500294724961253063262094347851648532948484015744234482127176, 178637397998076363738072161143020166658021410296000750470210702970495840542072593472223933495604, 212882796665866211361062005691533513171210236529206615726382386349302732713576121809661258490099, 58561663744740222629334837157967207932252252535166246251556037754645070994433805292841774497905, 25609567781964580960143043337243405594220123667952364318031106904986380757776294225070015032011, 11476425087644544472669950195538885728882539456773657813020343604992364043350003451979634220625, 64316758057986272001212792727553560375677791154147535048046127853101181834957112887708401120705, 103986272649792003515403291793115515821447954959962072646941633898606149445404316488386460415758, 144142771206567751527598433722442332451136178425437438737481904386517286428460079723971187716400, 125012482519523301110210191491818597414935878399154595115175294622926947514971899991615337755815, 35682650517895798588011089702038316387046390937748585071656137438860368957277585026161722666155, 202923222732249656016985479738839794677530497865983260894915656286404819529716910470187652693824, 173673982114997232212177497408887758391668518703760417216865480180160519811462201883139219364619, 203621379876883851302962323712305390858511149251242860193483453687175707956534064312653161329082, 121772813801625485699449708359386566914063138117767491946631438841764012041580623261406370009171, 145736476977155454746382600543570465908701482429280998442952185638269741454939049093583412562224, 196489322982766466372664140638168011550625821689584535828131848402755226739696085730975741733879, 220931477635198539961706820753516837757921204955162628561021570703440284629472228967053975765820, 106359786670266753207562101938836083641453603920332459861181652489435800512463585863821472225463, 83538548118408341428111545248823780511479478393364894424840082839229279434948332283086482161755, 55947139165912205398003754054020559870985522154574570305740641351270923488817457725259621494382, 85398260085875678515685838298352527106746778164892982339466719219968217912501044619725415064042, 147297778311293448948034455774989894442419178517226630948890447460907022144242181679160206215293, 37417212235590329115148310968135559958335424514905566266212642522120429158935027410456856518624, 28882412971311231482575103275695593600969449521199102290520247535811961883425248883755706447910, 35703805649079425123455913785906774794669776989629829560107151605297504690481080279268686026148, 4564096011725127606792289881567879226611387595922333603490967787044026130560098036359386785733, 103008741639009218278011953090969374697263669203178890009146725933230337615705542211648766798149, 149346767436405927735920043062667499806946271219292027838399581906346594150768470549838714805011, 135339068424170482227265259615107107854923593923672976241707994760027915863052450253784365132444, 166452338075536238395033508208267787888371213092892075222190588890154712184050789896541916380405, 94043282221647043414739539594976106567334808737112980053573556573424719769876418439894783371877, 197176788156351153440542487582833909600440029947913027096337550921321602378712992875686702257187, 106040143907246496732240787037359743361230151137702099201436574884090733904550622876337466172907]</span></span><br><span class="line"><span class="string"># 已知一个q，多组T，多组U，求x的值</span></span><br><span class="line"><span class="string"># 检测T中有几个元素 语法为len(set(T))</span></span><br><span class="line"><span class="string">print(len(set(T)))  # 90</span></span><br><span class="line"><span class="string">print(len(set(U)))  # 90</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;190.92.234.114&#x27;</span>, <span class="number">23334</span>, level=<span class="string">&#x27;debug&#x27;</span>)  <span class="comment"># 本地调试 debug下 自动打印接收到的数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># 3组数据</span></span><br><span class="line">    <span class="built_in">exec</span>(r.recvline())  <span class="comment"># 执行一行 ;exec()函数用来执行一个字符串表达式，并返回表达式的值; recvline()接收一行 -&gt; 这句也就是执行了接收到的str, 也就刚好存下了q,T和U</span></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;x = &#x27;</span>)  <span class="comment"># 接收到x = ; recvuntil()接收到指定的数据</span></span><br><span class="line">k = [long_to_bytes(j) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">set</span>([U[i]//T[i]</span><br><span class="line">                                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">90</span>)])]  <span class="comment"># 求出k -&gt; k= U/T</span></span><br><span class="line">k = k[<span class="number">0</span>].decode()  <span class="comment"># 转换为字符串</span></span><br><span class="line">k = k.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;_cfrt&#x27;</span>  <span class="comment"># 拼接 _cfrt 原因暂时未知</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;k=&#x27;</span>, k)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(bytes_to_long(k.encode())).encode())</span><br><span class="line">r.sendline(<span class="built_in">str</span>(bytes_to_long(k.encode())).encode())  <span class="comment"># 发送</span></span><br><span class="line"><span class="built_in">print</span>(r.recvall())  <span class="comment"># 接收所有</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>代码云剪贴板</title>
    <url>/2022/04/25/%E4%BB%A3%E7%A0%81%E4%BA%91%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
    <content><![CDATA[<p>代码进入查看</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>  Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---欢迎---&quot;</span>);</span><br><span class="line">        String[]arr=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入班级人数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> people= sc.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学期课程数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> course=sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=course;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入第&quot;</span> + i + <span class="string">&quot;门课程&quot;</span>);</span><br><span class="line">            Scanner sr=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            String course1=sr.nextLine();</span><br><span class="line">            arr[i]=course1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;学号&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=people;i++)&#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;总分&quot;</span>+<span class="string">&quot;平均分&quot;</span>);</span><br><span class="line">        student(people,course);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">student</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="comment">// int a = people;int b = course;</span></span><br><span class="line">        <span class="type">int</span> [][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line">        <span class="type">int</span> z=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> f=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">            arr[i][<span class="number">0</span>]=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;a;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;b;j++)&#123;</span><br><span class="line">                Random r=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                <span class="type">int</span> grade= r.nextInt(<span class="number">100</span>)+<span class="number">1</span>;</span><br><span class="line">                arr[i][j]=grade;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO 计算行平均分和总分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;b;j++)&#123;</span><br><span class="line">                z=z+arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            f = z/b;</span><br><span class="line">            <span class="comment">//arr[i][b+1]=f;</span></span><br><span class="line">            z=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for (int i=0;i&lt;a;i++)&#123;</span></span><br><span class="line"><span class="comment">//            // 行</span></span><br><span class="line"><span class="comment">//            for (int j=1;j&lt;b;j++)&#123;</span></span><br><span class="line"><span class="comment">//                // 列</span></span><br><span class="line"><span class="comment">//                z+=arr[i][j];</span></span><br><span class="line"><span class="comment">//                // 总分</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            f=z/b;</span></span><br><span class="line"><span class="comment">//            // 平均分</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            arr[i][b+1]=z;</span></span><br><span class="line"><span class="comment">//            arr[i][b+2]=f;</span></span><br><span class="line"><span class="comment">//            z=0;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">            <span class="comment">// 行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;b+<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="comment">// 列</span></span><br><span class="line"></span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>+arr[i][j]+<span class="string">&quot; &quot;</span>+<span class="string">&quot; \t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>云剪贴板</tag>
      </tags>
  </entry>
  <entry>
    <title>初中数学remake</title>
    <url>/2022/12/08/%E5%88%9D%E4%B8%AD%E6%95%B0%E5%AD%A6remake/</url>
    <content><![CDATA[<p>$$ax^2+bx+c &#x3D; 0 \quad(a!&#x3D;0) \quad\delta&gt;0$$</p>
<h2 id="韦达定理"><a href="#韦达定理" class="headerlink" title="韦达定理"></a>韦达定理</h2><p>$$Vieta’s \left{\begin{matrix}<br>x_1 + x_2 &#x3D; \frac{-b}{a} \ x_1x_2 &#x3D; \frac{c}{a}<br>\end{matrix}\right.$$</p>
<span id="more"></span>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><p>$$<br>x_1^2+x_2^2&#x3D;(x_1+x_2)^2-2x_1x_2<br>$$</p>
<h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><p>$$ |x1 - x2| &#x3D; \sqrt{(x_1 - x_2)^2} \quad\color{green}&#x3D;\frac{\sqrt\delta}{|a|}$$<br>$$ &#x3D;\sqrt{(x_1-x_2)^2-4x_1x_2} $$<br>$$ &#x3D;\sqrt{\frac{b^2}{a^2}-\frac{4c}{a}} $$<br>$$ &#x3D;\sqrt{\frac{b^2-4ac}{a^2}} $$</p>
]]></content>
      <tags>
        <tag>数学 Crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学入门</title>
    <url>/2022/05/03/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="5-2-5-5密码学习记录"><a href="#5-2-5-5密码学习记录" class="headerlink" title="5.2-5.5密码学习记录"></a>5.2-5.5密码学习记录</h2><span id="more"></span>

<h1 id="看我回旋踢"><a href="#看我回旋踢" class="headerlink" title="看我回旋踢"></a>看我回旋踢</h1><p>synt{}</p>
<h1 id="凯撒密码加密解密"><a href="#凯撒密码加密解密" class="headerlink" title="凯撒密码加密解密"></a>凯撒密码加密解密</h1><p>synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}</p>
<p>将flag与synt进行对照<br> s在26位字母中是第19位，f是第6位，由于这里是解密，需要向前推算，所以偏移量为13<br> y是第25位，l为12位，偏移量也是13 </p>
<p><a href="https://blog.csdn.net/m0_57329653/article/details/115831888">https://blog.csdn.net/m0_57329653/article/details/115831888</a></p>
<p>markdown语法链接</p>
<h1 id="Rabbit-解码"><a href="#Rabbit-解码" class="headerlink" title="Rabbit 解码"></a>Rabbit 解码</h1><h1 id="Quoted-Printable编码解码"><a href="#Quoted-Printable编码解码" class="headerlink" title="Quoted-Printable编码解码"></a>Quoted-Printable编码解码</h1><h1 id="火狐浏览器清楚dns缓存-about-networking-dns"><a href="#火狐浏览器清楚dns缓存-about-networking-dns" class="headerlink" title="火狐浏览器清楚dns缓存: about:networking#dns"></a>火狐浏览器清楚dns缓存: about:networking#dns</h1><h1 id="栅栏编码"><a href="#栅栏编码" class="headerlink" title="栅栏编码"></a>栅栏编码</h1><p>felhaagv{ewtehtehfilnakgw}<br>flag{wethinkwetheflag}<br>flag{}<br>ehav weth inkw</p>
]]></content>
      <tags>
        <tag>水题\密码学\RUU\靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学脚本记录</title>
    <url>/2022/05/06/%E5%AF%86%E7%A0%81%E5%AD%A6%E8%84%9A%E6%9C%AC%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>看题目中由 encode 可以猜到是一种编码方式	<a href="https://www.21r000.xyz/article/fb6d43a6.html">来源</a></p>
</blockquote>
<span id="more"></span>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">convert_uudecode() 函数对 uuencode 编码的字符串进行解码。</span></span><br><span class="line"><span class="comment">该函数常与 convert_uuencode() 函数一起使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="comment">// 对字符串进行编码</span></span><br><span class="line"><span class="variable">$encodeString</span> = <span class="title function_ invoke__">convert_uuencode</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$encodeString</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 对字符串进行解码(注意转义字符)</span></span><br><span class="line"><span class="variable">$decodeString</span> = <span class="title function_ invoke__">convert_uudecode</span>(<span class="variable">$encodeString</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$decodeString</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>去这里运行试试&gt;&gt;&gt;<a href="https://www.dooccn.com/php/">PHP在线运行</a></p>
<blockquote>
<p>脚本<a href="https://blog.csdn.net/shuaicenglou3032/article/details/116953015">来源</a></p>
</blockquote>
<h2 id="异性相吸"><a href="#异性相吸" class="headerlink" title="异性相吸"></a>异性相吸</h2><p>最近出现了一个奇葩观点，说性别都不一样，怎么能谈恋爱？为了证明这个观点错误，请大家证明异性是相吸的。 注意：得到的 flag 请包上 flag{} 提交</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_53315404/article/details/112972049">正解</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=<span class="built_in">open</span>(<span class="string">&#x27;key.txt&#x27;</span>).read()</span><br><span class="line">se=<span class="built_in">open</span>(<span class="string">&#x27;密文.txt&#x27;</span>).read()</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(key)):</span><br><span class="line">    res=<span class="built_in">ord</span>(key[i])^<span class="built_in">ord</span>(se[i])</span><br><span class="line">    flag=flag+<span class="built_in">chr</span>(res)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>密码学\脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>快读模板A+b</title>
    <url>/2022/10/03/%E5%BF%AB%E8%AF%BB%E6%A8%A1%E6%9D%BFA-b/</url>
    <content><![CDATA[<p>stdin A+B</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> endl = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> sscio &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">pull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll sign = <span class="number">1LL</span>,res = <span class="number">0LL</span>;</span><br><span class="line">        <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">for</span> (;!<span class="built_in">isdigit</span>(ch);ch=<span class="built_in">getchar</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                sign *= <span class="number">-1LL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(ch);ch = <span class="built_in">getchar</span>()) &#123;</span><br><span class="line">            res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span> + ch; <span class="comment">// *10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sign * res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll n=sscio::<span class="built_in">pull</span>();</span><br><span class="line">    ll p=sscio::<span class="built_in">pull</span>();</span><br><span class="line">    cout &lt;&lt; n + p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂</title>
    <url>/2022/12/21/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    <content><![CDATA[<h4 id="在acm被称为快速幂-平方求幂-在ctf中也被称为-montecarlo"><a href="#在acm被称为快速幂-平方求幂-在ctf中也被称为-montecarlo" class="headerlink" title="在acm被称为快速幂(平方求幂) 在ctf中也被称为 $montecarlo$"></a>在acm被称为<strong>快速幂</strong>(平方求幂) 在ctf中也被称为 $montecarlo$</h4><h5 id="先说幂运算的朴素做法，在数学中，重复连乘的运算叫做乘方，乘方的结果称为-幂"><a href="#先说幂运算的朴素做法，在数学中，重复连乘的运算叫做乘方，乘方的结果称为-幂" class="headerlink" title="先说幂运算的朴素做法，在数学中，重复连乘的运算叫做乘方，乘方的结果称为 幂"></a>先说幂运算的朴素做法，在<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6" title="数学">数学</a>中，重复连乘的运算叫做<strong>乘方</strong>，乘方的结果称为 <strong>幂</strong></h5><h6 id="displaystyle-n-个相同的数-displaystyle-b-连续相乘"><a href="#displaystyle-n-个相同的数-displaystyle-b-连续相乘" class="headerlink" title="${\displaystyle n}$  个相同的数 ${\displaystyle b}$  连续相乘"></a>${\displaystyle n}$ <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n"> 个相同的数 ${\displaystyle b}$ <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f11423fbb2e967f986e36804a8ae4271734917c3" alt="b"> 连续相乘</h6><span id="more"></span>

<p>$$<br>b^n &#x3D; \overbrace {b * b * b * ···} ^ {n \ number\ of\ b}<br>$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++ version</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> b, n, sum; <span class="comment">// 仅作演示, 实际应该使用python或高精度防止爆int</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin &gt;&gt; b &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123; <span class="comment">//对0次幂特判</span></span><br><span class="line">        std::cout &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = b, n = n - <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">while</span> (n --) &#123;</span><br><span class="line">        sum *= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> sum)</span><br><span class="line">    std::cout &lt;&lt; sum; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="让我们先来思考一个问题：7的10次方，怎样算比较快？"><a href="#让我们先来思考一个问题：7的10次方，怎样算比较快？" class="headerlink" title="让我们先来思考一个问题：7的10次方，怎样算比较快？"></a>让我们先来思考一个问题：<strong>7的10次方，怎样算比较快？</strong></h4><blockquote>
<blockquote>
<p><strong>方法1</strong>：上述提到的朴素算法, 来计算 $7 <em>7&#x3D;49$，$49</em> 7&#x3D;343$<br>这样算无疑太慢了，尤其对计算机的CPU而言，每次运算只乘上一个个位数，无疑太屈才了。这时我们想到，也许可以拆分问题。<br><strong>方法2</strong>：先算7的5次方，即$7 <em>7</em> 7 <em>7</em> 7$，再算它的平方，共进行了<strong>5次</strong>乘法。<br><strong>方法3</strong>：先算7 <em>7得49，则7的5次方为$49</em> 49 * 7$，再算它的平方，共进行了<strong>4次</strong>乘法。</p>
</blockquote>
</blockquote>
<h2 id="递归快速幂"><a href="#递归快速幂" class="headerlink" title="递归快速幂"></a>递归快速幂</h2><p>刚刚我们用到的，无非是一个<strong>二分</strong>的思路。我们很自然地可以得到一个递归方程：(虽然我觉得并不自然)<br>$$<br>b^n&#x3D;\begin{cases}b^{n-1}\cdot b,&amp;\text{if } n \text { is odd} \ b^{\frac{n}{2}}\cdot b^{\frac{n}{2}}, &amp;\text{if } n \text { is even but not 0}\ 1,&amp;\text{if } n&#x3D;0\end{cases}<br>$$</p>
<p>计算a的n次方，如果n是偶数（不为0），那么就<strong>先计算a的n&#x2F;2次方，然后平方</strong>；如果n是奇数，那么就<strong>先计算a的n-1次方，再乘上a</strong>；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c++ version</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> b, n, temp, sum; <span class="comment">// 依旧避免爆int</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">powF</span><span class="params">(<span class="type">int</span> b, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123; <span class="comment">// 奇数 odd</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">powF</span>(b, n - <span class="number">1</span>) * b;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 偶数 even</span></span><br><span class="line">        temp = <span class="built_in">powF</span>(b, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> temp * temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin &gt;&gt; b &gt;&gt; n;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">powF</span>(b, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="注意，这个temp变量是必要的，因为如果不把a-frac-n-2-记录下来，直接写成qpow-a-n-x2F-2-qpow-a-n-x2F-2-，那会计算两次a-frac-n-2-，整个算法就退化为了-O-n"><a href="#注意，这个temp变量是必要的，因为如果不把a-frac-n-2-记录下来，直接写成qpow-a-n-x2F-2-qpow-a-n-x2F-2-，那会计算两次a-frac-n-2-，整个算法就退化为了-O-n" class="headerlink" title="注意，这个temp变量是必要的，因为如果不把a^{\frac{n}{2}}记录下来，直接写成qpow(a, n &#x2F;2)*qpow(a, n &#x2F;2)，那会计算两次a^{\frac{n}{2}}，整个算法就退化为了 O(n)"></a>注意，这个temp变量是必要的，因为如果不把a^{\frac{n}{2}}记录下来，直接写成qpow(a, n &#x2F;2)*qpow(a, n &#x2F;2)，那会计算两次a^{\frac{n}{2}}，整个算法就退化为了 O(n)</h5><h5 id="在实际问题中，题目常常会要求对一个大素数取模，这是因为计算结果可能会非常巨大，但是在这里考察高精度又没有必要。这时我们的快速幂也应当进行取模，此时应当注意，原则是步步取模，如果MOD较大，还应当开long-long"><a href="#在实际问题中，题目常常会要求对一个大素数取模，这是因为计算结果可能会非常巨大，但是在这里考察高精度又没有必要。这时我们的快速幂也应当进行取模，此时应当注意，原则是步步取模，如果MOD较大，还应当开long-long" class="headerlink" title="在实际问题中，题目常常会要求对一个大素数取模，这是因为计算结果可能会非常巨大，但是在这里考察高精度又没有必要。这时我们的快速幂也应当进行取模，此时应当注意，原则是步步取模，如果MOD较大，还应当开long long"></a>在实际问题中，题目常常会要求对一个大素数取模，这是因为计算结果可能会非常巨大，但是在这里考察高精度又没有必要。这时我们的快速幂也应当进行取模，此时应当注意，原则是<strong>步步取模</strong>，如果MOD较大，还应当<strong>开long long</strong></h5><h5 id="大家知道，递归虽然简洁，但会产生额外的空间开销。我们可以把递归改写为循环，来避免对栈空间的大量占用，也就是非递归快速幂"><a href="#大家知道，递归虽然简洁，但会产生额外的空间开销。我们可以把递归改写为循环，来避免对栈空间的大量占用，也就是非递归快速幂" class="headerlink" title="大家知道，递归虽然简洁，但会产生额外的空间开销。我们可以把递归改写为循环，来避免对栈空间的大量占用，也就是非递归快速幂"></a>大家知道，递归虽然<strong>简洁</strong>，但会产生<strong>额外的空间开销</strong>。我们可以把递归改写为循环，来避免对栈空间的大量占用，也就是<strong>非递归快速幂</strong></h5><h2 id="非递归快速幂"><a href="#非递归快速幂" class="headerlink" title="非递归快速幂"></a>非递归快速幂</h2><h5 id="我们换一个角度来引入非递归的快速幂。还是7的10次方，但这次，我们把10写成二进制的形式，也就是-1010-2"><a href="#我们换一个角度来引入非递归的快速幂。还是7的10次方，但这次，我们把10写成二进制的形式，也就是-1010-2" class="headerlink" title="我们换一个角度来引入非递归的快速幂。还是7的10次方，但这次，我们把10写成二进制的形式，也就是 (1010)_2"></a>我们换一个角度来引入非递归的快速幂。还是7的10次方，但这次，我们把10写成<strong>二进制</strong>的形式，也就是 (1010)_2</h5><h5 id="现在我们要计算"><a href="#现在我们要计算" class="headerlink" title="现在我们要计算"></a>现在我们要计算</h5><p>$7^{(1010)_2}$ ，可以怎么做？我们很自然地想到可以把它拆分为 $7^{(1000)_2} \cdot 7^{(10)_2}$. 实际上，对于任意的整数，我们都可以把它拆成若干个 $7^{(100…)_2}$ 的形式相乘。而这些$7^{(100…)_2}$，恰好就是 $7^1$ 、$7^2$、$7^4$……我们只需<strong>不断把底数平方</strong>就可以算出它们。</p>
<p>我们先看代码，再来仔细推敲这个过程：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归快速幂</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)        <span class="comment">//如果n的当前末位为1</span></span><br><span class="line">            ans *= a;  <span class="comment">//ans乘上当前的a</span></span><br><span class="line">        a *= a;        <span class="comment">//a自乘</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;       <span class="comment">//n往右移一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最初ans为1，然后我们一位一位算：</p>
<p>1010的最后一位是0，所以a^1这一位不要。然后1010变为101，a变为a^2。</p>
<p>101的最后一位是1，所以a^2这一位是需要的，乘入ans。101变为10，a再自乘。</p>
<p>10的最后一位是0，跳过，右移，自乘。</p>
<p>然后1的最后一位是1，ans再乘上a^8。循环结束，返回结果。</p>
<p>这里的位运算符，&gt;&gt;是右移，表示把二进制数<strong>往右移一位</strong>，相当于&#x2F;2；&amp;是按位与，&amp;1可以理解为<strong>取出二进制数的最后一位</strong>，相当于 $\mod2&#x3D;&#x3D;1$。这么一等价，是不是看出了递归和非递归的快速幂的关系了？虽然非递归快速幂因为牵扯到二进制理解起来稍微复杂一点，但基本思路其实和递归快速幂没有太大的出入。</p>
<h2 id="快速幂的拓展"><a href="#快速幂的拓展" class="headerlink" title="快速幂的拓展"></a>快速幂的拓展</h2><p>上面所述的都是<strong>整数</strong>的快速幂，但其实，在算 a^n 时，只要a的数据类型支持<strong>乘法</strong>且<strong>满足结合律</strong>，快速幂的算法都是有效的。矩阵、高精度整数，都可以照搬这个思路。下面给出一个模板：</p>
<p>注意，较复杂类型的快速幂的时间复杂度不再是简单的 O(\log n) ，它与底数的乘法的时间复杂度有关。</p>
<p>例如，<strong>矩阵快速幂</strong>的一个经典应用是求斐波那契数列：</p>
<p><strong>（洛谷P1962） 斐波那契数列</strong></p>
<blockquote>
<p><strong>题目背景</strong></p>
</blockquote>
<p>大家都知道，斐波那契数列是满足如下性质的一个数列：<br>$$<br>F_n &#x3D; \begin{cases}1&amp; (n \le 2) \ F_{n-1}+F_{n-2}&amp; (n\ge 3) \end{cases}<br>$$<br><strong>题目描述</strong></p>
<p>请你求出$F_n \bmod 10^9 + 7$的值。</p>
<p><em>（以下内容涉及到基本的线性代数知识）</em></p>
<p>设矩阵</p>
<p>$$<br>A&#x3D;\begin{bmatrix}0 &amp;1\ 1 &amp; 1\end{bmatrix}<br>$$ ，我们有</p>
<p>$$<br>A\begin{bmatrix}F_n\ F_{n+1}\end{bmatrix} &#x3D; \begin{bmatrix}F_{n+1}\ F_n+F_{n+1}\end{bmatrix}&#x3D;\begin{bmatrix}F_{n+1}\ F_{n+2}\end{bmatrix}<br>$$</p>
<p>，于是 :</p>
<p>$$<br>\begin{aligned} \begin{bmatrix}F_n\ F_{n+1}\end{bmatrix} &amp;&#x3D; A\begin{bmatrix}F_{n-1}\ F_n\end{bmatrix}\&amp;&#x3D;A^2\begin{bmatrix}F_{n-2}\ F_{n-1}\end{bmatrix}\&amp;&#x3D;…\&amp;&#x3D;A^{n-1}\begin{bmatrix}F_1\ F_2\end{bmatrix}\&amp;&#x3D;A^{n-1}\begin{bmatrix}1\ 1\end{bmatrix} \end{aligned}<br>$$</p>
<p>这样，我们把原来较为复杂的问题转化成了<strong>求某个矩阵的幂</strong>的问题，这就可以应用快速幂求解了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span></span><br><span class="line">&#123;</span><br><span class="line">    ll a1, a2, b1, b2;</span><br><span class="line">    <span class="built_in">matrix</span>(ll a1, ll a2, ll b1, ll b2) : <span class="built_in">a1</span>(a1), <span class="built_in">a2</span>(a2), <span class="built_in">b1</span>(b1), <span class="built_in">b2</span>(b2) &#123;&#125;</span><br><span class="line">    matrix <span class="keyword">operator</span>*(<span class="type">const</span> matrix &amp;y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">matrix <span class="title">ans</span><span class="params">((a1 * y.a1 + a2 * y.b1) % MOD,</span></span></span><br><span class="line"><span class="params"><span class="function">                   (a1 * y.a2 + a2 * y.b2) % MOD,</span></span></span><br><span class="line"><span class="params"><span class="function">                   (b1 * y.a1 + b2 * y.b1) % MOD,</span></span></span><br><span class="line"><span class="params"><span class="function">                   (b1 * y.a2 + b2 * y.b2) % MOD)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">matrix <span class="title">ans</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span></span>; <span class="comment">//单位矩阵</span></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            ans = ans * a;</span><br><span class="line">        a = a * a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x;</span><br><span class="line">    <span class="function">matrix <span class="title">M</span><span class="params">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    matrix ans = <span class="built_in">qpow</span>(M, x - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (ans.a1 + ans.a2) % MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>![[Pasted image 20221221012506.png]]</p>
<blockquote>
<p>引用几乎是复制了这篇文章: <a href="https://zhuanlan.zhihu.com/p/95902286">https://zhuanlan.zhihu.com/p/95902286</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>比赛产品雏形</title>
    <url>/2022/04/13/%E6%AF%94%E8%B5%9B%E4%BA%A7%E5%93%81%E9%9B%8F%E5%BD%A2/</url>
    <content><![CDATA[<h2 id="安防-安全产品概览图（具体名字暂未定）"><a href="#安防-安全产品概览图（具体名字暂未定）" class="headerlink" title="安防 - 安全产品概览图（具体名字暂未定）"></a>安防 - 安全产品概览图（具体名字暂未定）</h2><span id="more"></span>

<h2 id="文本展示实现"><a href="#文本展示实现" class="headerlink" title="文本展示实现"></a>文本展示实现</h2><h1 id="寄"><a href="#寄" class="headerlink" title="寄"></a>寄</h1>]]></content>
      <tags>
        <tag>Xmind转换</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2022/04/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p align="center">
    <br/>
    <a href="https://github.com/ziishaned/learn-regex">
        <img src="https://i.imgur.com/bYwl7Vf.png" alt="Learn Regex">
    </a>
    <br /><br />
    <p>
        <a href="https://twitter.com/home?status=Learn%20regex%20the%20easy%20way%20by%20%40ziishaned%20http%3A//github.com/ziishaned/learn-regex">
            <img src="https://img.shields.io/badge/twitter-tweet-blue.svg?style=flat-square"/>
        </a>
        <a href="https://twitter.com/ziishaned">
            <img src="https://img.shields.io/badge/feedback-@ziishaned-blue.svg?style=flat-square" />
        </a>
    </p>
</p>
<span id="more"></span>

<h2 id="翻译："><a href="#翻译：" class="headerlink" title="翻译："></a>翻译：</h2><ul>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/README.md">English</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-de.md">German</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-es.md">Español</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-fr.md">Français</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-pt_BR.md">Português do Brasil</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">中文版</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-ja.md">日本語</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-ko.md">한국어</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-tr.md">Turkish</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-gr.md">Greek</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-hu.md">Magyar</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-pl.md">Polish</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-ru.md">Русский</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-vn.md">Tiếng Việt</a></li>
<li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-fa.md">فارسی</a></li>
<li><a href="translations/README-he.md">עברית</a></li>
</ul>
<h2 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h2><p><a href="https://gum.co/learn-regex"><img src="https://img.shields.io/badge/-Download%20PDF%20-0a0a0a.svg?style=flat&colorA=0a0a0a"></a></p>
<blockquote>
<p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</p>
</blockquote>
<p>一个正则表达式是一种从左到右匹配主体字符串的模式。<br>“Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。<br>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p>
<p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。<br>我们使用以下正则表达式来验证一个用户名：</p>
<p><br/><br/></p>
<p align="center">
  <img src="https://github.com/ziishaned/learn-regex/raw/master/img/regexp-cn.png" alt="Regular expression">
</p>

<p>以上的正则表达式可以接受 <code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。<br>但不匹配<code>Jo</code>，因为它包含了大写的字母而且太短了。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#1-%E5%9F%BA%E6%9C%AC%E5%8C%B9%E9%85%8D">1. 基本匹配</a></li>
<li><a href="#2-%E5%85%83%E5%AD%97%E7%AC%A6">2. 元字符</a><ul>
<li><a href="#21-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6-">2.1 点运算符 .</a></li>
<li><a href="#22-%E5%AD%97%E7%AC%A6%E9%9B%86">2.2 字符集</a><ul>
<li><a href="#221-%E5%90%A6%E5%AE%9A%E5%AD%97%E7%AC%A6%E9%9B%86">2.2.1 否定字符集</a></li>
</ul>
</li>
<li><a href="#23-%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0">2.3 重复次数</a><ul>
<li><a href="#231--%E5%8F%B7">2.3.1 * 号</a></li>
<li><a href="#232--%E5%8F%B7">2.3.2 + 号</a></li>
<li><a href="#233--%E5%8F%B7">2.3.3 ? 号</a></li>
</ul>
</li>
<li><a href="#24--%E5%8F%B7">2.4 {} 号</a></li>
<li><a href="#25--%E7%89%B9%E5%BE%81%E6%A0%87%E7%BE%A4">2.5 (…) 特征标群</a></li>
<li><a href="#26--%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%A6">2.6 | 或运算符</a></li>
<li><a href="#27-%E8%BD%AC%E7%A0%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">2.7 转码特殊字符</a></li>
<li><a href="#28-%E9%94%9A%E7%82%B9">2.8 锚点</a><ul>
<li><a href="#281--%E5%8F%B7">2.8.1 ^ 号</a></li>
<li><a href="#282--%E5%8F%B7">2.8.2 $ 号</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#3-%E7%AE%80%E5%86%99%E5%AD%97%E7%AC%A6%E9%9B%86">3. 简写字符集</a></li>
<li><a href="#4-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E6%96%AD%E8%A8%80%E5%89%8D%E5%90%8E%E9%A2%84%E6%9F%A5">4. 零宽度断言(前后预查)</a><ul>
<li><a href="#41--%E6%AD%A3%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.1 ?&#x3D;… 正先行断言</a></li>
<li><a href="#42--%E8%B4%9F%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.2 ?!… 负先行断言</a></li>
<li><a href="#43---%E6%AD%A3%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.3 ?&lt;&#x3D; … 正后发断言</a></li>
<li><a href="#44--%E8%B4%9F%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.4 ?&lt;!… 负后发断言</a></li>
</ul>
</li>
<li><a href="#5-%E6%A0%87%E5%BF%97">5. 标志</a><ul>
<li><a href="#51-%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99-case-insensitive">5.1 忽略大小写（Case Insensitive）</a></li>
<li><a href="#52-%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2-global-search">5.2 全局搜索（Global search）</a></li>
<li><a href="#53-%E5%A4%9A%E8%A1%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6-multiline">5.3 多行修饰符（Multiline）</a></li>
</ul>
</li>
<li><a href="#%E9%A2%9D%E5%A4%96%E8%A1%A5%E5%85%85">额外补充</a></li>
<li><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></li>
<li><a href="#%E8%AE%B8%E5%8F%AF%E8%AF%81">许可证</a></li>
</ul>
<h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。<br>例如：一个正则表达式 <code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p>
<pre>
"the" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/dmRygT/1">在线练习</a></p>
<p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p>
<p>正则表达式是大小写敏感的，所以<code>The</code>不会匹配<code>the</code>。</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/1paXsy/1">在线练习</a></p>
<h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>正则表达式主要依赖于元字符。<br>元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td>句号匹配任意单个字符除了换行符。</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td>字符种类。匹配方括号内的任意字符。</td>
</tr>
<tr>
<td align="center">[^ ]</td>
<td>否定的字符种类。匹配除了方括号里的任意字符</td>
</tr>
<tr>
<td align="center">*</td>
<td>匹配&gt;&#x3D;0个重复的在*号之前的字符。</td>
</tr>
<tr>
<td align="center">+</td>
<td>匹配&gt;&#x3D;1个重复的+号前的字符。</td>
</tr>
<tr>
<td align="center">?</td>
<td>标记?之前的字符为可选.</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td>匹配num个大括号之前的字符或字符集 (n &lt;&#x3D; num &lt;&#x3D; m).</td>
</tr>
<tr>
<td align="center">(xyz)</td>
<td>字符集，匹配与 xyz 完全相等的字符串.</td>
</tr>
<tr>
<td align="center">&amp;#124;</td>
<td>或运算符，匹配符号前或后的字符.</td>
</tr>
<tr>
<td align="center">&amp;#92;</td>
<td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ &#124;</code></td>
</tr>
<tr>
<td align="center">^</td>
<td>从开始行开始匹配.</td>
</tr>
<tr>
<td align="center">$</td>
<td>从末端开始匹配.</td>
</tr>
</tbody></table>
<h2 id="2-1-点运算符"><a href="#2-1-点运算符" class="headerlink" title="2.1 点运算符 ."></a>2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子。<br><code>.</code>匹配任意单个字符，但不匹配换行符。<br>例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。</p>
<pre>
".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/xc9GkU/1">在线练习</a></p>
<h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也叫做字符类。<br>方括号用来指定一个字符集。<br>在方括号中使用连字符来指定字符集的范围。<br>在方括号中的字符集不关心顺序。<br>例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p>
<pre>
"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/2ITLQ4/1">在线练习</a></p>
<p>方括号的句号就表示句号。<br>表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p>
<pre>
"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a>
</pre>

<p><a href="https://regex101.com/r/wL3xtE/1">在线练习</a></p>
<h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。<br>例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p>
<pre>
"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/nNNlq3/1">在线练习</a></p>
<h2 id="2-3-重复次数"><a href="#2-3-重复次数" class="headerlink" title="2.3 重复次数"></a>2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。<br>这些元字符在不同的情况下有着不同的意思。</p>
<h3 id="2-3-1-号"><a href="#2-3-1-号" class="headerlink" title="2.3.1 * 号"></a>2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。<br>例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。</p>
<pre>
"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.
</pre>

<p><a href="https://regex101.com/r/7m8me5/1">在线练习</a></p>
<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。<br><code>*</code>和表示匹配空格的符号<code>\s</code>连起来用，如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串。</p>
<pre>
"\s*cat\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the con<a href="#learn-regex"><strong>cat</strong></a>enation.
</pre>

<p><a href="https://regex101.com/r/gGrwuz/1">在线练习</a></p>
<h3 id="2-3-2-号"><a href="#2-3-2-号" class="headerlink" title="2.3.2 + 号"></a>2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;&#x3D;1 次。<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p>
<pre>
"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/Dzf9Aa/1">在线练习</a></p>
<h3 id="2-3-3-号"><a href="#2-3-3-号" class="headerlink" title="2.3.3 ? 号"></a>2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。<br>例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p>
<pre>
"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a href="https://regex101.com/r/cIg9zm/1">在线练习</a></p>
<pre>
"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/kPpO2x/1">在线练习</a></p>
<h2 id="2-4-号"><a href="#2-4-号" class="headerlink" title="2.4 {} 号"></a>2.4 <code>&#123;&#125;</code> 号</h2><p>在正则表达式中 <code>&#123;&#125;</code> 是一个量词，常用来限定一个或一组字符可以重复出现的次数。<br>例如， 表达式 <code>[0-9]&#123;2,3&#125;</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p>
<pre>
"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a href="https://regex101.com/r/juM86s/1">在线练习</a></p>
<p>我们可以省略第二个参数。<br>例如，<code>[0-9]&#123;2,&#125;</code> 匹配至少两位 0~9 的数字。</p>
<pre>
"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a href="https://regex101.com/r/Gdy4w5/1">在线练习</a></p>
<p>如果逗号也省略掉则表示重复固定的次数。<br>例如，<code>[0-9]&#123;3&#125;</code> 匹配3位数字</p>
<pre>
"[0-9]{3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.
</pre>

<p><a href="https://regex101.com/r/Sivu30/1">在线练习</a></p>
<h2 id="2-5-特征标群"><a href="#2-5-特征标群" class="headerlink" title="2.5 (...) 特征标群"></a>2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式。<code>(...)</code> 中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式 <code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code> 。再比如之前说的 <code>&#123;&#125;</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>&#123;&#125;</code> 前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p>
<p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p>
<pre>
"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/tUxrBG/1">在线练习</a></p>
<h2 id="2-6-或运算符"><a href="#2-6-或运算符" class="headerlink" title="2.6 | 或运算符"></a>2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或，用作判断条件。</p>
<p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p>
<pre>
"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/fBXyX0/1">在线练习</a></p>
<h2 id="2-7-转码特殊字符"><a href="#2-7-转码特殊字符" class="headerlink" title="2.7 转码特殊字符"></a>2.7 转码特殊字符</h2><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>。</p>
<p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p>
<pre>
"(f|c|m)at\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/DOc5Nu/1">在线练习</a></p>
<h2 id="2-8-锚点"><a href="#2-8-锚点" class="headerlink" title="2.8 锚点"></a>2.8 锚点</h2><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code> 指定开头，<code>$</code> 指定结尾。</p>
<h3 id="2-8-1-号"><a href="#2-8-1-号" class="headerlink" title="2.8.1 ^ 号"></a>2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p>
<p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p>
<p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p>
<pre>
"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/5ljjgB/1">在线练习</a></p>
<pre>
"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a href="https://regex101.com/r/jXrKne/1">在线练习</a></p>
<h3 id="2-8-2-号"><a href="#2-8-2-号" class="headerlink" title="2.8.2 $ 号"></a>2.8.2 <code>$</code> 号</h3><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p>
<p>例如，<code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p>
<pre>
"(at\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a href="https://regex101.com/r/y4Au4D/1">在线练习</a></p>
<pre>
"(at\.)$" => The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a href="https://regex101.com/r/t0AkOd/1">在线练习</a></p>
<h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写。如下:</p>
<table>
<thead>
<tr>
<th align="center">简写</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td>除换行符外的所有字符</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配所有非字母数字，即符号，等同于： <code>[^\w]</code></td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配数字： <code>[0-9]</code></td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配非数字： <code>[^\d]</code></td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配所有空格字符，等同于： <code>[\t\n\f\r\p&#123;Z&#125;]</code></td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配所有非空格字符： <code>[^\s]</code></td>
</tr>
<tr>
<td align="center">\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td align="center">\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td align="center">\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td align="center">\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td align="center">\p</td>
<td>匹配 CR&#x2F;LF（等同于 <code>\r\n</code>），用来匹配 DOS 行终止符</td>
</tr>
</tbody></table>
<h2 id="4-零宽度断言（前后预查）"><a href="#4-零宽度断言（前后预查）" class="headerlink" title="4. 零宽度断言（前后预查）"></a>4. 零宽度断言（前后预查）</h2><p>先行断言和后发断言（合称 lookaround）都属于<strong>非捕获组</strong>（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p>
<p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和 <code>$10.88</code> 中获得所有以 <code>$</code> 字符开头的数字，我们将使用以下的正则表达式 <code>(?&lt;=\$)[0-9\.]*</code>。意思是：获取所有包含 <code>.</code> 并且前面是 <code>$</code> 的数字。</p>
<p>零宽度断言如下：</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">?&#x3D;</td>
<td>正先行断言-存在</td>
</tr>
<tr>
<td align="center">?!</td>
<td>负先行断言-排除</td>
</tr>
<tr>
<td align="center">?&lt;&#x3D;</td>
<td>正后发断言-存在</td>
</tr>
<tr>
<td align="center">?&lt;!</td>
<td>负后发断言-排除</td>
</tr>
</tbody></table>
<h3 id="4-1-正先行断言"><a href="#4-1-正先行断言" class="headerlink" title="4.1 ?=... 正先行断言"></a>4.1 <code>?=...</code> 正先行断言</h3><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p>
<p>返回结果只包含满足匹配条件的第一部分表达式。<br>定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p>
<p>正先行断言的内容写在括号中的等号后面。<br>例如，表达式 <code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p>
<pre>
"(T|t)he(?=\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/IDDARt/1">在线练习</a></p>
<h3 id="4-2-负先行断言"><a href="#4-2-负先行断言" class="headerlink" title="4.2 ?!... 负先行断言"></a>4.2 <code>?!...</code> 负先行断言</h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。<br><code>正先行断言</code>  定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p>
<p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p>
<pre>
"(T|t)he(?!\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/V32Npg/1">在线练习</a></p>
<h3 id="4-3-lt-正后发断言"><a href="#4-3-lt-正后发断言" class="headerlink" title="4.3 ?&lt;= ... 正后发断言"></a>4.3 <code>?&lt;= ...</code> 正后发断言</h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p>
<pre>
"(?<=(T|t)he\s)(fat|mat)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/avH165/1">在线练习</a></p>
<h3 id="4-4-lt-负后发断言"><a href="#4-4-lt-负后发断言" class="headerlink" title="4.4 ?&lt;!... 负后发断言"></a>4.4 <code>?&lt;!...</code> 负后发断言</h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p>
<pre>
"(?&lt;!(T|t)he\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/8Efx5G/1">在线练习</a></p>
<h2 id="5-标志"><a href="#5-标志" class="headerlink" title="5. 标志"></a>5. 标志</h2><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。<br>这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p>
<table>
<thead>
<tr>
<th align="center">标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td>忽略大小写。</td>
</tr>
<tr>
<td align="center">g</td>
<td>全局搜索。</td>
</tr>
<tr>
<td align="center">m</td>
<td>多行修饰符：锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始。</td>
</tr>
</tbody></table>
<h3 id="5-1-忽略大小写-Case-Insensitive"><a href="#5-1-忽略大小写-Case-Insensitive" class="headerlink" title="5.1 忽略大小写 (Case Insensitive)"></a>5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写。<br>例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/dpQyf9/1">在线练习</a></p>
<pre>
"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/ahfiuh/1">在线练习</a></p>
<h3 id="5-2-全局搜索-Global-search"><a href="#5-2-全局搜索-Global-search" class="headerlink" title="5.2 全局搜索 (Global search)"></a>5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。<br>例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+ <code>at</code>，并返回全部结果。</p>
<pre>
"/.(at)/" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/jnk6gM/1">在线练习</a></p>
<pre>
"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/dO1nef/1">在线练习</a></p>
<h3 id="5-3-多行修饰符-Multiline"><a href="#5-3-多行修饰符-Multiline" class="headerlink" title="5.3 多行修饰符 (Multiline)"></a>5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p>
<p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。</p>
<p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据 <code>m</code> 修饰符，现在表达式匹配每行的结尾。</p>
<pre>
"/.at(.)?$/" => The fat
                cat sat
                on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/hoGMkP/1">在线练习</a></p>
<pre>
"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>
                  cat <a href="#learn-regex"><strong>sat</strong></a>
                  on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/E88WE2/1">在线练习</a></p>
<h3 id="6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching"><a href="#6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching" class="headerlink" title="6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)"></a>6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>
<pre>
"/(.*at)/" => <a href="#learn-regex"><strong>The fat cat sat on the mat</strong></a>. </pre>

<p><a href="https://regex101.com/r/AyAdgJ/1">在线练习</a></p>
<pre>
"/(.*?at)/" => <a href="#learn-regex"><strong>The fat</strong></a> cat sat on the mat. </pre>

<p><a href="https://regex101.com/r/AyAdgJ/2">在线练习</a></p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul>
<li>报告问题</li>
<li>开放合并请求</li>
<li>传播此文档</li>
<li>直接和我联系 <a href="mailto:&#x7a;&#105;&#105;&#115;&#x68;&#x61;&#110;&#x65;&#100;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x7a;&#105;&#105;&#115;&#x68;&#x61;&#110;&#x65;&#100;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a> 或 <a href="https://twitter.com/ziishaned"><img src="https://img.shields.io/twitter/url/https/twitter.com/ziishaned.svg?style=social&label=Follow%20@ziishaned" alt="Twitter URL"></a></li>
</ul>
<h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>MIT &amp;copy; <a href="https://twitter.com/ziishaned">Zeeshan Ahmad</a></p>
]]></content>
      <tags>
        <tag>程序技巧,Github转载</tag>
      </tags>
  </entry>
  <entry>
    <title>级数</title>
    <url>/2022/12/08/%E7%BA%A7%E6%95%B0/</url>
    <content><![CDATA[<h1 id="级数"><a href="#级数" class="headerlink" title="级数"></a>级数</h1><h2 id="调和级数"><a href="#调和级数" class="headerlink" title="调和级数"></a>调和级数</h2><h3 id="调和级数的定义"><a href="#调和级数的定义" class="headerlink" title="调和级数的定义"></a>调和级数的定义</h3><p>调和级数是指这样一个数列：$$\sum_{k&#x3D;1}^{\infty} \frac{1}{k}$$</p>
<span id="more"></span>

<h3 id="调和级数的性质"><a href="#调和级数的性质" class="headerlink" title="调和级数的性质"></a>调和级数的性质</h3><blockquote>
<p>$\gamma$是欧拉常数，其值为<br>$$\gamma &#x3D; 0.57721566490153286060651209008240243104215933593992\cdots$$<br>明显的, $S(n)$为第$n$个调和数。<br>已知<br>$$\sum_{k&#x3D;1}^{\infty} \frac{1}{k} &#x3D; \infty$$<br>欧拉推导过调和级数有限多项式和的表达式为 $$\sum_{k&#x3D;1}^{\infty} \frac{1}{k} &#x3D; \ln (n + 1) + \gamma$$<br>我们需要满足 $S(n) &gt; k$,即满足 $$\ln (n + 1) + \gamma &gt; k$$  化简得 $$n &gt; e^{k-\gamma} - 1$$</p>
</blockquote>
<h4 id="我们只需求满足上式的最小的n，所以-n-x3D-e-k-gamma-0-5-四舍五入-，即模拟做法的复杂度为-O-e-k-gamma-，而实际上，我们可以直接求出-n-的值，即-n-x3D-left-lfloor-e-k-gamma-right-rfloor-，复杂度为-O-1-。代码如下"><a href="#我们只需求满足上式的最小的n，所以-n-x3D-e-k-gamma-0-5-四舍五入-，即模拟做法的复杂度为-O-e-k-gamma-，而实际上，我们可以直接求出-n-的值，即-n-x3D-left-lfloor-e-k-gamma-right-rfloor-，复杂度为-O-1-。代码如下" class="headerlink" title="我们只需求满足上式的最小的n，所以$n&#x3D;e^{k-\gamma} + 0.5(四舍五入)$，即模拟做法的复杂度为$O(e^{k-\gamma})$，而实际上，我们可以直接求出$n$的值，即$n &#x3D; \left\lfloor e^{k-\gamma} \right\rfloor$，复杂度为$O(1)$。代码如下"></a>我们只需求满足上式的最小的n，所以$n&#x3D;e^{k-\gamma} + 0.5(四舍五入)$，即模拟做法的复杂度为$O(e^{k-\gamma})$，而实际上，我们可以直接求出$n$的值，即$n &#x3D; \left\lfloor e^{k-\gamma} \right\rfloor$，复杂度为$O(1)$。代码如下</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cmath <span class="keyword">import</span> exp</span><br><span class="line">gamma = <span class="number">0.57721566490153286060651209008240243104215933593992</span></span><br><span class="line">k = <span class="built_in">int</span>(<span class="built_in">int</span>(<span class="built_in">input</span>()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># exp(k-gamma) + 0.5 整数输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(exp(k-gamma).real + <span class="number">0.5</span>))</span><br></pre></td></tr></table></figure>

<h4 id="由所有正整数的倒数依次形成的级数"><a href="#由所有正整数的倒数依次形成的级数" class="headerlink" title="由所有正整数的倒数依次形成的级数"></a>由所有正整数的倒数依次形成的级数</h4><p>$$<br>\sum_{n&#x3D;1}^{\infty}\frac{1}{n}&#x3D;\infty {\quad} &#x3D;&gt; 1+\frac{1}{2}+\frac{1}{3}+\frac{1}{4}+\frac{1}{n}+\cdots<br>$$</p>
<h4 id="由所有正整数的倒数平方依次形成的级数"><a href="#由所有正整数的倒数平方依次形成的级数" class="headerlink" title="由所有正整数的倒数平方依次形成的级数"></a>由所有正整数的倒数平方依次形成的级数</h4><p>$$<br>\sum_{n&#x3D;1}^{\infty}\frac{1}{n^2}&#x3D;\infty {\quad} &#x3D;&gt; 1+\frac{1}{4}+\frac{1}{9}+\frac{1}{16}+\frac{1}{n^2}+\cdots<br>$$</p>
<h4 id="由所有正整数的倒数立方依次形成的级数"><a href="#由所有正整数的倒数立方依次形成的级数" class="headerlink" title="由所有正整数的倒数立方依次形成的级数"></a>由所有正整数的倒数立方依次形成的级数</h4><p>$$<br>\sum_{n&#x3D;1}^{\infty}\frac{1}{n^3}&#x3D;\infty {\quad} &#x3D;&gt; 1+\frac{1}{8}+\frac{1}{27}+\frac{1}{64}+\frac{1}{n^3}+\cdots<br>$$</p>
<h2 id="绝对收敛级数"><a href="#绝对收敛级数" class="headerlink" title="绝对收敛级数"></a>绝对收敛级数</h2><p>$\boldsymbol{Absolute\quad Covergent\quad Series}$</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>级数的每一项都取绝对值之后仍然收敛<br>$$\sum_{k&#x3D;1}^{\infty} \left|a_k\right|$$</p>
<h2 id="条件收敛级数"><a href="#条件收敛级数" class="headerlink" title="条件收敛级数"></a>条件收敛级数</h2><p>$\boldsymbol{Conditionally\quad Covergent\quad Series}$</p>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>因为正负交错而收敛的级数<br>$$\sum_{k&#x3D;1}^{\infty} (-1)^{k-1}a_k$$</p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>线性筛素数</title>
    <url>/2022/10/03/%E7%BA%BF%E6%80%A7%E7%AD%9B%E7%B4%A0%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3383">【模板】线性筛素数 - 洛谷</a></p>
<p><a href="https://www.luogu.com.cn/problem/P5736">【深基7.例2】质数筛 - 洛谷</a></p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sz=<span class="number">1e8</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> sscio &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">pull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll sign = <span class="number">1LL</span>,res = <span class="number">0LL</span>;</span><br><span class="line">        <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">for</span> (;!<span class="built_in">isdigit</span>(ch);ch=<span class="built_in">getchar</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                sign *= <span class="number">-1LL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(ch);ch = <span class="built_in">getchar</span>()) &#123;</span><br><span class="line">            res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span> + ch; <span class="comment">// *10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sign * res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::bitset;</span><br><span class="line">bitset&lt;sz&gt; primeTable;</span><br><span class="line"><span class="type">int</span> primes[sz],prpp=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fetchPrimes</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;ed)</span> </span>&#123; <span class="comment">//线性筛 形参为边界</span></span><br><span class="line">    primeTable.<span class="built_in">reset</span>();</span><br><span class="line">    primeTable.<span class="built_in">set</span>(<span class="number">0</span>);</span><br><span class="line">    primeTable.<span class="built_in">set</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> cx=<span class="number">2</span>;cx&lt;ed;cx++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!primeTable[cx]) &#123;</span><br><span class="line">            primes[prpp++]=cx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> cy=<span class="number">0</span>;cy&lt;prpp&amp;&amp;cx*primes[cy]&lt;ed;cy++) &#123; <span class="comment">//用质数来筛质数</span></span><br><span class="line">            primeTable.<span class="built_in">set</span>(cx*primes[cy]);</span><br><span class="line">            <span class="keyword">if</span> (cx%primes[cy]==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fetchPrimes</span>(sz<span class="number">-6</span>);</span><br><span class="line">    <span class="type">int</span> n=sscio::<span class="built_in">pull</span>(); <span class="comment">//n为查询范围,因为已经筛了超出题目范围素数了,所以无需处理</span></span><br><span class="line">    <span class="type">int</span> p=sscio::<span class="built_in">pull</span>(); <span class="comment">//查询的个数</span></span><br><span class="line">    <span class="keyword">while</span>(p--) &#123;</span><br><span class="line">        <span class="type">int</span> k=sscio::<span class="built_in">pull</span>(); <span class="comment">//表示查询第 k 小的素数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, primes[k<span class="number">-1</span>]); <span class="comment">//因为我们下标从零开始 所以是k - 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sz=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> sscio &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">pull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll sign = <span class="number">1LL</span>,res = <span class="number">0LL</span>;</span><br><span class="line">        <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">for</span> (;!<span class="built_in">isdigit</span>(ch);ch=<span class="built_in">getchar</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                sign *= <span class="number">-1LL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (;<span class="built_in">isdigit</span>(ch);ch = <span class="built_in">getchar</span>()) &#123;</span><br><span class="line">            res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span> + ch; <span class="comment">// *10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sign * res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::bitset;</span><br><span class="line">bitset&lt;sz&gt; primeTable;</span><br><span class="line"><span class="type">int</span> primes[sz],prpp=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fetchPrimes</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;ed)</span> </span>&#123; <span class="comment">//线性筛 形参为边界</span></span><br><span class="line">    primeTable.<span class="built_in">reset</span>();</span><br><span class="line">    primeTable.<span class="built_in">set</span>(<span class="number">0</span>);</span><br><span class="line">    primeTable.<span class="built_in">set</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> cx=<span class="number">2</span>;cx&lt;ed;cx++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!primeTable[cx]) &#123;</span><br><span class="line">            primes[prpp++]=cx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> cy=<span class="number">0</span>;cy&lt;prpp&amp;&amp;cx*primes[cy]&lt;ed;cy++) &#123; <span class="comment">//用质数来筛质数</span></span><br><span class="line">            primeTable.<span class="built_in">set</span>(cx*primes[cy]);</span><br><span class="line">            <span class="keyword">if</span> (cx%primes[cy]==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fetchPrimes</span>(sz<span class="number">-6</span>);</span><br><span class="line">    <span class="comment">// int n=sscio::pull(); //n为查询范围,因为已经筛了超出题目范围素数了,所以无需处理</span></span><br><span class="line">    <span class="type">int</span> p=sscio::<span class="built_in">pull</span>(); <span class="comment">//查询的个数</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">//空格数量</span></span><br><span class="line">    <span class="keyword">while</span>(p--) &#123;</span><br><span class="line">        <span class="type">int</span> k=sscio::<span class="built_in">pull</span>();</span><br><span class="line">        <span class="keyword">if</span> (!primeTable[k]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt==<span class="number">0</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ^ <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>线性筛</tag>
      </tags>
  </entry>
  <entry>
    <title>转载知乎的科学文章</title>
    <url>/2022/05/02/%E8%BD%AC%E8%BD%BD%E7%9F%A5%E4%B9%8E%E7%9A%84%E7%A7%91%E5%AD%A6%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="一学就会，树莓派4B搭建V2Ray图文教程"><a href="#一学就会，树莓派4B搭建V2Ray图文教程" class="headerlink" title="一学就会，树莓派4B搭建V2Ray图文教程"></a>一学就会，树莓派4B搭建V2Ray图文教程</h1><p><a href="https://www.zhihu.com/people/wu-qi-yi-29">芝妈小汤圆</a></p>
<span id="more"></span>

<h2 id="这是我的第1篇原创技术文章"><a href="#这是我的第1篇原创技术文章" class="headerlink" title="这是我的第1篇原创技术文章"></a><em>这是我的第1篇原创技术文章</em></h2><p>大家好，我是芝妈，一个90后程序媛妈妈～</p>
<p>作为一个自学成才的前端工程师，最近我又对硬件<strong>树莓派</strong>产生了兴趣。主要是最近小汤圆去上托班了，<strong>我全职在家闲得慌</strong>，盘算着开始给他启蒙。</p>
<p>发现如果开始启蒙2岁的小汤圆写代码，那真的抽象得不可能完成。但是如果我可以用看得见摸得着的<strong>树莓派做一些有意思的项目</strong>，那还是有一些现实的物体可以在他的小脑瓜里留下印象的～</p>
<p>然后，我就找出了半年前买的还在垫桌脚的树莓派，在微信读书上找了本从入门到放弃，准备开始大干一场。<strong>又发现了一个新问题！</strong></p>
<p><strong>树莓派的raspbian系统，不支持大多数代fan理qiang软件。</strong>而不能代理对于程序员而言，无疑是鸟儿少了翅膀一样失去了行动力。所以，以下就是我研究了2天的树莓派代理大法！<strong>同样适用于windows系统和mac系统噢！</strong></p>
<hr>
<h2 id="什么是v2ray"><a href="#什么是v2ray" class="headerlink" title="什么是v2ray?"></a><em>什么是v2ray?</em></h2><blockquote>
<p>V2Ray是一个与Shadowsocks类似的代理软件。V2Ray本身只是一个内核，V2Ray上的图形客户端大多是调用 V2Ray内核套一个图形界面的外壳。</p>
</blockquote>
<p><strong>而代理说得简单一点就是，我们自己的pc通过代理软件的客户端连接到境外服务器上的代理软件的服务端，获取境外资源。</strong></p>
<p><img src="https://pic4.zhimg.com/80/v2-eb78dac6b6e0ecc4ec3f81aa63737283_720w.jpg" alt="img"></p>
<p>如上图，V2Ray根据不同的操作系统，有不同的客户端。<strong>本次我们按照树莓派为例</strong>，所需软件：v2net节点服务(境外服务器)，v2rayA客户端(安装在本地你的电脑上)。</p>
<p>V2Ray github地址：</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/v2fly/v2ray-core">GitHub - v2fly&#x2F;v2ray-core: A platform for building proxies to bypass network restrictions.</a></p>
<p><a href="https://link.zhihu.com/?target=https://github.com/v2fly/v2ray-core">github.com&#x2F;v2fly&#x2F;v2ray-core<img src="https://pic4.zhimg.com/v2-474da921bc09c6b5966d8de82fc1ca4f_180x120.jpg" alt="img"></a></p>
<p>V2RayA github地址：</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/v2rayA/v2rayA">https://github.com/v2rayA/v2rayA</a></p>
<p><a href="https://link.zhihu.com/?target=https://github.com/v2rayA/v2rayA">github.com&#x2F;v2rayA&#x2F;v2rayA</a></p>
<hr>
<h2 id="本地安装v2rayA"><a href="#本地安装v2rayA" class="headerlink" title="本地安装v2rayA"></a><em>本地安装v2rayA</em></h2><p>因为v2rayA客户端依赖V2Ray核心，所以我们需要先在本地安装V2Ray：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 为了后续脚本执行安装，切换root账户</span><br><span class="line">sudo su</span><br><span class="line">// 安装V2Ray</span><br><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-7db33e5f48b0ad81a78ade0d37fb75e0_720w.jpg" alt="img"></p>
<p>此时V2Ray已经安装完毕，别忘了启动服务：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 启动</span><br><span class="line">systemctl start v2ray</span><br><span class="line">// 设置开机自动启动</span><br><span class="line">systemctl enable v2ray</span><br><span class="line">// 查看服务状态</span><br><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></figure>

<p><img src="https://pic3.zhimg.com/80/v2-7712e3d81b84c168607b15e36cf0fd5a_720w.jpg" alt="img"></p>
<p>如上图，服务处于active状态，接着安装v2rayA：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 添加公钥</span><br><span class="line">wget -qO - https://apt.v2raya.mzz.pub/key/public-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">// 添加v2rayA软件源</span><br><span class="line">echo &quot;deb https://apt.v2raya.mzz.pub/ v2raya main&quot; | sudo tee /etc/apt/sources.list.d/v2raya.list</span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">// 安装v2rayA，安装前先更新一下</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install v2raya</span><br></pre></td></tr></table></figure>

<p>安装好后，同样启动服务：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 启动</span><br><span class="line">sudo systemctl start v2raya.service</span><br><span class="line">// 设置开机自动启动</span><br><span class="line">sudo systemctl enable v2raya.service</span><br></pre></td></tr></table></figure>

<p>一切完毕之后，我们打开浏览器，v2rayA就在127.0.0.1:2017上，创建用户名和密码后就可以登录了：</p>
<p><img src="https://pic4.zhimg.com/80/v2-961eca5b78a35cb3ec94a252153084cb_720w.jpg" alt="img"></p>
<hr>
<h2 id="v2net节点服务"><a href="#v2net节点服务" class="headerlink" title="v2net节点服务"></a><em>v2net节点服务</em></h2><p>如果你不想自己买境外服务器这么麻烦，可以选择便宜方便的节点服务。我选择的是v2net(</p>
<p><a href="https://link.zhihu.com/?target=https://main.v2ray.cx/index.php">Portal Home - V2NET</a></p>
<p><a href="https://link.zhihu.com/?target=https://main.v2ray.cx/index.php">main.v2ray.cx&#x2F;index.php<img src="https://pic4.zhimg.com/v2-c555c12260e0b251a896fa7b82fe8fb7_ipico.jpg" alt="img"></a></p>
<p>)，看上去和v2ray是一家的。</p>
<p><img src="https://pic4.zhimg.com/80/v2-03cc6bd8f64d680e1e91af6254da83d3_720w.jpg" alt="img"></p>
<p>我选的是1.9美元一个月的套餐，差不多12人民币，一个人用够够的了。</p>
<p><img src="https://pic1.zhimg.com/80/v2-ebd6a3c2a504ac739f8fc22cde7cfe64_720w.jpg" alt="img"></p>
<p>复制订阅地址，在之后配置中需要用到。</p>
<hr>
<h2 id="设置v2rayA"><a href="#设置v2rayA" class="headerlink" title="设置v2rayA"></a><em>设置v2rayA</em></h2><p>在v2rayA选择import，导入刚刚复制的订阅地址：</p>
<p><img src="https://pic4.zhimg.com/80/v2-8709ff5bfc3e343f49202806613756c7_720w.jpg" alt="img"></p>
<p>导入成功后，就可以看到多了一个tab，下面有好多节点：</p>
<p><img src="https://pic1.zhimg.com/80/v2-27e45ff7efab467387019d71017d0e38_720w.jpg" alt="img"></p>
<p>最后但是最关键的，打开右上角的setting，打开弹窗里左下角的address and ports：</p>
<p><img src="https://pic3.zhimg.com/80/v2-b4146bc6ee70508fdb72cac57beac1b6_720w.jpg" alt="img"></p>
<p>记下不同协议对应的端口号，后面要用，如图socks5的端口是20170，http的端口是20171：</p>
<p><img src="https://pic4.zhimg.com/80/v2-cf139ed1ffcf18dfdbd34379615a0137_720w.jpg" alt="img"></p>
<hr>
<h2 id="安装浏览器扩展程序SwitchyOmega"><a href="#安装浏览器扩展程序SwitchyOmega" class="headerlink" title="安装浏览器扩展程序SwitchyOmega"></a><em>安装浏览器扩展程序SwitchyOmega</em></h2><p>虽然目前本地和远程服务器都已经设置好，但此时还没有联通，还要通过SwitchyOmega填写相应的ip和端口才能正确代理。</p>
<p>可在</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/FelisCatus/SwitchyOmega/releases">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>
<p><a href="https://link.zhihu.com/?target=https://github.com/FelisCatus/SwitchyOmega/releases">github.com&#x2F;FelisCatus&#x2F;SwitchyOmega&#x2F;releases</a></p>
<p>进行下载。</p>
<p><img src="https://pic4.zhimg.com/80/v2-51bfdcf0b2e1415c5285943cf2e96e47_720w.jpg" alt="img"></p>
<p>如上图，选择crx版本下载。但因为此程序crx版本无法正确安装，下载到本地后，后缀改成zip。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 解压到本地proxy文件夹</span><br><span class="line">unzip -o -d ./proxy SwitchyOmega_Chromium.zip</span><br><span class="line">// 把解压后的proxy文件夹上传到树莓派</span><br><span class="line">scp -r ./proxy pi@192.168.31.233:/home/pi</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-fbe6f47166fa038612ca7ab476f14bdf_720w.jpg" alt="img"></p>
<p>打开树莓派上浏览器扩展程序，右上角Developer mode打开，点击左上角Load unpacked，选择proxy文件夹，这样SwitchyOmega就安装成功了。</p>
<p><img src="https://pic3.zhimg.com/80/v2-7a65e004ae4b455fb82744121e4124b2_720w.jpg" alt="img"></p>
<p>按照上图设置代理，这里socks5协议的端口要和v2rayA里面一致。每次更改设置后记得点击左边的应用选项。</p>
<p><img src="https://pic4.zhimg.com/80/v2-86923c6f45384767bb3f9fa71330c947_720w.jpg" alt="img"></p>
<p>最后再设置下auto switch。auto switch有点类似于pac，符合需要代理规则的情景，走v2ray代理，不需要代理的情景直接连接。而规则列表都总结在 <a href="https://link.zhihu.com/?target=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a>。同样更改后，点击立即更新情景模式。</p>
<hr>
<h2 id="登登登-等～"><a href="#登登登-等～" class="headerlink" title="登登登~等～"></a><em>登<del>登</del>登~等～</em></h2><p>用我家65寸大电视看一下，哈哈，现在我们已经成功代理啦！</p>
<p><img src="https://pic1.zhimg.com/80/v2-1537c768e7eae2048abba5cfc5dae404_720w.jpg" alt="img"></p>
]]></content>
      <tags>
        <tag>科学</tag>
      </tags>
  </entry>
  <entry>
    <title>重构前(水果店管理系统)</title>
    <url>/2022/04/27/%E9%87%8D%E6%9E%84%E5%89%8D-%E6%B0%B4%E6%9E%9C%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 水果店管理系统</span></span><br><span class="line"><span class="comment">// 实现水果店的增删改查</span></span><br><span class="line"><span class="comment">// TODO 显示全表</span></span><br><span class="line"><span class="comment">// TODO 修改水果库存</span></span><br><span class="line"><span class="comment">// TODO 修改水果价格</span></span><br><span class="line">    <span class="comment">// TODO 添加水果(增)</span></span><br><span class="line"><span class="comment">// TODO 退出系统</span></span><br><span class="line"><span class="comment">// TODO 各个欢迎和交互语句</span></span><br></pre></td></tr></table></figure>



<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 水果店管理系统 &#123;</span><br><span class="line">    <span class="comment">// 水果店管理系统</span></span><br><span class="line">    <span class="comment">// 实现水果店的增删改查</span></span><br><span class="line">    <span class="comment">// TODO 显示全表</span></span><br><span class="line">    <span class="comment">// TODO 修改水果库存</span></span><br><span class="line">    <span class="comment">// TODO 修改水果价格</span></span><br><span class="line">        <span class="comment">// TODO 添加水果(增)</span></span><br><span class="line">    <span class="comment">// TODO 退出系统</span></span><br><span class="line">    <span class="comment">// TODO 各个欢迎和交互语句</span></span><br><span class="line">    &lt;!--more--&gt;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[][] 表头;</span><br><span class="line">        <span class="comment">// TODO 创建初始水果信息</span></span><br><span class="line">        表头 = <span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;</span><br><span class="line">                &#123;<span class="string">&quot;水果名称&quot;</span>, <span class="string">&quot;水果价格(元/每斤)&quot;</span>, <span class="string">&quot;水果库存(斤)&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;3.5&quot;</span>, <span class="string">&quot;10&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;2.5&quot;</span>, <span class="string">&quot;20&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;西瓜&quot;</span>, <span class="string">&quot;3.5&quot;</span>, <span class="string">&quot;30&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;荔枝&quot;</span>, <span class="string">&quot;5.5&quot;</span>, <span class="string">&quot;40&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;梨&quot;</span>, <span class="string">&quot;2.5&quot;</span>, <span class="string">&quot;50&quot;</span>&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// TODO 修改水果信息 (输入后)查找，修改，删除，输出 操作选择的while语句</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> 操作选择 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// TODO 欢迎语句</span></span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="comment">// 格式化</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">            <span class="comment">// 交互</span></span><br><span class="line">            <span class="comment">// System.out.print(&quot;1.查找&quot; + &quot;\t&quot; + &quot;2.修改&quot; + &quot;\t&quot; + &quot;3.删除&quot; + &quot;\t&quot; + &quot;4.输出&quot; + &quot;\t&quot; + &quot;5.退出&quot; + &quot;\n&quot;);</span></span><br><span class="line">            System.out.print(<span class="string">&quot;1.查找&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;2.增加&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;3.修改&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;4.删除&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;5.输出(此功能优先选择选项7)&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;6.退出&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;7.只读模式打开表格&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            操作选择 = cin.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (操作选择 == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要查找的水果名称：(输入0返回主菜单)&quot;</span>);</span><br><span class="line">                String 查找水果名称 = cin.next();</span><br><span class="line">                <span class="keyword">if</span> (查找水果名称.equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// TODO 查找水果信息</span></span><br><span class="line">                <span class="type">int</span> <span class="keyword">for</span>计数器 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">                    <span class="comment">// 行</span></span><br><span class="line">                    <span class="keyword">if</span> (表头[i][<span class="number">0</span>].equals(查找水果名称)) &#123;</span><br><span class="line">                        <span class="comment">// .equals() 方法用于比较两个字符串是否相等。 == 比较的是两个对象的地址 -&gt; https://www.cnblogs.com/Whichzzz/p/15684836.html(==与equals的区别)</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;水果名称：&quot;</span> + 表头[i][<span class="number">0</span>]);</span><br><span class="line">                        System.out.println(<span class="string">&quot;水果价格：&quot;</span> + 表头[i][<span class="number">1</span>]);</span><br><span class="line">                        System.out.println(<span class="string">&quot;水果库存：&quot;</span> + 表头[i][<span class="number">2</span>]);</span><br><span class="line">                        <span class="keyword">for</span>计数器++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">for</span>计数器 == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;查找失败！没有这个数据&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (操作选择 == <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要添加的水果名称：(输入0返回主菜单)&quot;</span>);</span><br><span class="line">                String 添加水果名称 = cin.next();</span><br><span class="line">                <span class="keyword">if</span> (添加水果名称.equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要添加的水果价格：(输入0返回主菜单)&quot;</span>);</span><br><span class="line">                String 添加水果价格 = cin.next();</span><br><span class="line">                <span class="keyword">if</span> (添加水果价格.equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要添加的水果库存：(输入0返回主菜单)&quot;</span>);</span><br><span class="line">                String 添加水果库存 = cin.next();</span><br><span class="line">                <span class="keyword">if</span> (添加水果库存.equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// TODO 添加水果信息(未完成)</span></span><br><span class="line">                String[][] 新表头 = <span class="keyword">new</span> <span class="title class_">String</span>[表头.length + <span class="number">1</span>][表头[<span class="number">0</span>].length];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; 表头[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                        新表头[i][j] = 表头[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 遍历输出新表头</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; 新表头.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; 新表头.length; j++) &#123;</span><br><span class="line">                        System.out.println(新表头[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;操作完成&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (操作选择 == <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要修改的水果名称：(输入0返回主菜单)&quot;</span>);</span><br><span class="line">                String 修改水果名称 = cin.next();</span><br><span class="line">                <span class="keyword">if</span> (修改水果名称.equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要修改的水果价格：(输入0返回主菜单)&quot;</span>);</span><br><span class="line">                String 修改水果价格 = cin.next();</span><br><span class="line">                <span class="keyword">if</span> (修改水果价格.equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要修改的水果库存：&quot;</span>);</span><br><span class="line">                String 修改水果库存 = cin.next();</span><br><span class="line">                <span class="comment">// TODO 修改水果信息</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (表头[i][<span class="number">0</span>].equals(修改水果名称)) &#123;</span><br><span class="line">                        表头[i][<span class="number">1</span>] = 修改水果价格;</span><br><span class="line">                        表头[i][<span class="number">2</span>] = 修改水果库存;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;操作完成&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (操作选择 == <span class="number">4</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入要删除的水果名称：&quot;</span>);</span><br><span class="line">                String 删除水果名称 = cin.next();</span><br><span class="line">                <span class="comment">// TODO 删除水果信息</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (表头[i][<span class="number">0</span>].equals(删除水果名称)) &#123;</span><br><span class="line">                        表头[i][<span class="number">0</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        表头[i][<span class="number">1</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        表头[i][<span class="number">2</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (操作选择 == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="comment">// TODO 输出水果信息</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;水果名称：&quot;</span> + 表头[i][<span class="number">0</span>]);</span><br><span class="line">                    System.out.println(<span class="string">&quot;水果价格：&quot;</span> + 表头[i][<span class="number">1</span>]);</span><br><span class="line">                    System.out.println(<span class="string">&quot;水果库存：&quot;</span> + 表头[i][<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (操作选择 == <span class="number">6</span>) &#123;</span><br><span class="line">                <span class="comment">// TODO 退出系统</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (操作选择 == <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="comment">// TODO 查看所有水果信息</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;水果名称：&quot;</span> + 表头[i][<span class="number">0</span>]);</span><br><span class="line">                    System.out.println(<span class="string">&quot;水果价格：&quot;</span> + 表头[i][<span class="number">1</span>]);</span><br><span class="line">                    System.out.println(<span class="string">&quot;水果库存：&quot;</span> + 表头[i][<span class="number">2</span>]);</span><br><span class="line">                    System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>重构,代码</tag>
      </tags>
  </entry>
  <entry>
    <title>项目概述(已摆烂)</title>
    <url>/2022/04/25/%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0-%E5%B7%B2%E6%91%86%E7%83%82/</url>
    <content><![CDATA[<p><strong>产品描述</strong></p>
<p>双目摄像头和深度学习以及物联网加持赋能于’安防产品名字‘，使其根据不同的风险等级去汇报给用户，由程序不间断的检测为用户保证安全</p>
<span id="more"></span>

<p><strong>用户群体</strong></p>
<p>所有人，无论是有房没房他都会需要这个东西</p>
<p><strong>项目愿景</strong></p>
<p>让天下没有入室盗窃（让人们可以睡个安稳觉）</p>
<p><strong>竞争对手</strong></p>
<p>容易被各大厂招安，资金如果不够，很可能要么被大厂的后来的fake产品盖过或者被收购(也不是坏事)</p>
<p><strong>差异化</strong></p>
<p>此领域目前无大厂入驻，<strong>同时将外挂摄像头，方便安装，随机附送一个12v2a电源和1m摄像头链接线</strong>，<strong>可以选配2m，5m，10m长度 1m换购2m免费。与现在互联网品牌为降低成本不附送电源形成对比。</strong></p>
<p>　安防产品怎样才能做到Pro的抓手是什么？方法论又该如何寻找？互联网研发人员间流传着这样一句话，在细分领域找到抓手，形成方法论，才能对外输出，反哺生态。带着这句话，我们还要更加慎重的去对齐这个问题：互联网研发人员间有着这样的共识，在细分领域找到抓手，形成方法论，才能对外输出，反哺生态。这不禁令我深思。了解清楚安防产品怎样才能做到Pro到底存在于哪条赛道，是解决一切问题的痛点。安防产品怎样才能做到Pro的打法，到底是怎样的，而聚焦安防产品怎样才能做到Pro本身，又会沉淀出什么样的方法论？我们认为，找到抓手，形成方法论，安防产品怎样才能做到Pro则会迎刃而解。既然如此，所谓安防产品怎样才能做到Pro，关键是安防产品怎样才能做到Pro如何才能赋能目标，进而反哺目标生态。</p>
<p>　　互联网大厂管理人员间流传着这样一句话，找到正确的赛道，选择正确的商业模式，才能将项目落地。这句话语虽然很短，但沉淀之后真的能发现痛点。互联网产品经理间有着这样的共识，如何强化认知，快速响应，是非常值得跟进的。这句话语虽然很短，但沉淀之后真的能发现痛点。互联网产品经理间流传着这样一句话，如何强化认知，快速响应，是非常值得跟进的。这不禁令我深思。互联网运营人员间流传着这样一句话，做精细化运营，向目标发力，才能获得影响力。这不禁令我深思。互联网研发人员间有着这样的共识，在细分领域找到抓手，形成方法论，才能对外输出，反哺生态。这让我明白了问题的抓手，每个人都不得不复盘这些问题。 在拉通对齐这种问题时，互联网运营人员间有着这样的共识，做精细化运营，向目标发力，才能获得影响力。也许这句话就是最好的答案。每个人都不得不复盘这些问题。 在拉通对齐这种问题时，而这些问题并不是痛点，而我们需要聚焦的关键是，互联网大厂管理人员间有着这样的共识，找到正确的赛道，选择正确的商业模式，才能将项目落地。这让我明白了问题的抓手，互联网研发人员间有着这样的共识，在细分领域找到抓手，形成方法论，才能对外输出，反哺生态。这句话语虽然很短，但沉淀之后真的能发现痛点。经过上述讨论，我们认为，找到抓手，形成方法论，安防产品怎样才能做到Pro则会迎刃而解。</p>
<p>　　而这些问题并不是痛点，而我们需要聚焦的关键是，互联网大厂管理人员间流传着这样一句话，找到正确的赛道，选择正确的商业模式，才能将项目落地。这不禁令我深思。互联网产品经理间有着这样的共识，如何强化认知，快速响应，是非常值得跟进的。也许这句话就是最好的答案。</p>
<p><strong>笔记（本部分不提交）</strong></p>
<p><strong>产品图片</strong></p>
<p><img src="https://tcs.teambition.net/storage/312gc796e93b4981a180deb836d49cff478e?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY1MTM5MDIyNSwiaWF0IjoxNjUwNzg1NDI1LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmdjNzk2ZTkzYjQ5ODFhMTgwZGViODM2ZDQ5Y2ZmNDc4ZSJ9.5nR5yioxuLBTDk9UZ25HwLzSAbfXi5XuSxrMfRNq8yA&download=blob.png"></p>
<p><img src="https://tcs.teambition.net/storage/312ge39d7c25bd5c07cacaefc66a4ee4d059?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY1MTM5MDIyNSwiaWF0IjoxNjUwNzg1NDI1LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmdlMzlkN2MyNWJkNWMwN2NhY2FlZmM2NmE0ZWU0ZDA1OSJ9.7enmeiRCoHerJ470gbj6Lv5CYkNdyrJaOGhv-Lvkb10&download=blob.png"></p>
<p><strong>随便找的，这个只是演示，看的懂就行</strong></p>
<blockquote>
<p><strong>Pro黑化文本必选：</strong></p>
</blockquote>
<blockquote>
<p>UGC，转化，打法，闭环，生态，发力，导流，格局， 长尾，垂直，落地，干货，阈值，优化， 迭代，敏捷，评估，高优，体验，布局， 创新，痛点，价值，流量，数据，玩法， 体系，跟进，反哺，回顾，沉淀，一砥商业模式，插个需求，降维打法、头部、腰部、沉浸、生态、渠道下沉、头部、腰部、裂变、导流、测试、迭代、分发、逻辑、撬动、盘活、整合、操盘。</p>
</blockquote>
<blockquote>
<p><strong>Pro必要语法鉴赏</strong></p>
</blockquote>
<p><img src="https://tcs.teambition.net/storage/312gc2fb21f5fdef38a2fbec91523715c7be?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY1MTM5MDIyNSwiaWF0IjoxNjUwNzg1NDI1LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmdjMmZiMjFmNWZkZWYzOGEyZmJlYzkxNTIzNzE1YzdiZSJ9.DJNZ9I7kG4BvRa7JJmDBMeaSxgJc54di-Eic1zUm9mM&download=blob.jpeg"></p>
<p>不过说到底我还是觉得在技术方面和落实方面要更接地气才能更吸引评委和投资人，我面过的投资人很少会说这些奇奇怪怪的词语，反而<strong>某为</strong>的新品发布会和区域新品提货会才会如此故弄玄虚，<strong>某果</strong>从不需要这么做。</p>
]]></content>
  </entry>
  <entry>
    <title>重构后(水果店管理系统)</title>
    <url>/2022/04/27/%E9%87%8D%E6%9E%84%E5%90%8E-%E6%B0%B4%E6%9E%9C%E5%BA%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> L1653 水果店管理 分public.</span></span><br><span class="line"><span class="comment"> *     // TODO 显示全表</span></span><br><span class="line"><span class="comment"> *     // TODO 修改水果库存</span></span><br><span class="line"><span class="comment"> *     // TODO 修改水果价格</span></span><br><span class="line"><span class="comment"> *     // TODO 添加水果(增)</span></span><br><span class="line"><span class="comment"> *     // TODO 退出系统</span></span><br><span class="line"><span class="comment"> *     // TODO 各个欢迎和交互语句</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> L1653 水果店管理 分public.</span></span><br><span class="line"><span class="comment"> *     // TODO 显示全表</span></span><br><span class="line"><span class="comment"> *     // TODO 修改水果库存</span></span><br><span class="line"><span class="comment"> *     // TODO 修改水果价格</span></span><br><span class="line"><span class="comment"> *     // TODO 添加水果(增)</span></span><br><span class="line"><span class="comment"> *     // TODO 退出系统</span></span><br><span class="line"><span class="comment"> *     // TODO 各个欢迎和交互语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">S09E06</span>重构类 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[][] 表头;</span><br><span class="line">        表头 = <span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;</span><br><span class="line">                &#123;<span class="string">&quot;水果&quot;</span>, <span class="string">&quot;数量&quot;</span>, <span class="string">&quot;单价&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;5.5&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;20&quot;</span>, <span class="string">&quot;3.5&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;西瓜&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;4.5&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;葡萄&quot;</span>, <span class="string">&quot;40&quot;</span>, <span class="string">&quot;6.5&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;荔枝&quot;</span>, <span class="string">&quot;50&quot;</span>, <span class="string">&quot;7.5&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;柠檬&quot;</span>, <span class="string">&quot;60&quot;</span>, <span class="string">&quot;8.5&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;梨&quot;</span>, <span class="string">&quot;70&quot;</span>, <span class="string">&quot;9.5&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;桃&quot;</span>, <span class="string">&quot;80&quot;</span>, <span class="string">&quot;10.5&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;柚子&quot;</span>, <span class="string">&quot;90&quot;</span>, <span class="string">&quot;11.5&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;桔子&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;12.5&quot;</span>&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// TODO 修改水果信息 (输入后)查找，修改，删除，输出 操作选择的while语句</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// TODO 显示全表</span></span><br><span class="line">            显示表格(表头);</span><br><span class="line">            System.out.println(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line"><span class="comment">/**            System.out.println(&quot;1.查找&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;2.修改&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;3.删除&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;4.输出&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;5.退出&quot;); */</span></span><br><span class="line">            System.out.println(<span class="string">&quot;1.查找&quot;</span> + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;2.修改&quot;</span>+ <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;3.删除&quot;</span>+ <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;4.输出&quot;</span>+ <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;5.退出&quot;</span>);</span><br><span class="line">            <span class="type">int</span> 选择 = cin.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (选择) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要查找的水果名称：&quot;</span>);</span><br><span class="line">                    String 水果名称 = cin.next();</span><br><span class="line">                    查找水果(水果名称, 表头);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要修改的水果名称：&quot;</span>);</span><br><span class="line">                    String 水果名称<span class="number">2</span> = cin.next();</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要修改的数量：&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> 数量 = cin.nextInt();</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要修改的单价：&quot;</span>);</span><br><span class="line">                    <span class="type">double</span> 单价 = cin.nextDouble();</span><br><span class="line">                    修改水果(水果名称<span class="number">2</span>, 数量, 单价, 表头);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要删除的水果名称：&quot;</span>);</span><br><span class="line">                    String 水果名称<span class="number">3</span> = cin.next();</span><br><span class="line">                    删除水果(水果名称<span class="number">3</span>, 表头);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    输出水果(表头);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入错误，请重新输入&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 水果店管理系统</span></span><br><span class="line">    <span class="comment">// 实现水果店的增删改查</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 查找水果(String 水果名称, String[][] 表头) &#123;</span><br><span class="line">        <span class="comment">/*       TODO 查找水果 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (表头[i][<span class="number">0</span>].equals(水果名称)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;水果名称：&quot;</span> + 表头[i][<span class="number">0</span>]);</span><br><span class="line">                System.out.println(<span class="string">&quot;数量：&quot;</span> + 表头[i][<span class="number">1</span>]);</span><br><span class="line">                System.out.println(<span class="string">&quot;单价：&quot;</span> + 表头[i][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 修改水果(String 水果名称, <span class="type">int</span> 数量, <span class="type">double</span> 单价, String[][] 表头) &#123;</span><br><span class="line">        <span class="comment">// TODO 修改水果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (表头[i][<span class="number">0</span>].equals(水果名称)) &#123;</span><br><span class="line">                表头[i][<span class="number">1</span>] = String.valueOf(数量);</span><br><span class="line">                表头[i][<span class="number">2</span>] = String.valueOf(单价);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 删除水果(String 水果名称, String[][] 表头) &#123;</span><br><span class="line">        <span class="comment">// TODO 删除水果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (表头[i][<span class="number">0</span>].equals(水果名称)) &#123;</span><br><span class="line">                表头[i][<span class="number">0</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                表头[i][<span class="number">1</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                表头[i][<span class="number">2</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 输出水果(String[][] 表头) &#123;</span><br><span class="line">        <span class="comment">// TODO 输出水果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!表头[i][<span class="number">0</span>].equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;水果名称：&quot;</span> + 表头[i][<span class="number">0</span>]);</span><br><span class="line">                System.out.println(<span class="string">&quot;数量：&quot;</span> + 表头[i][<span class="number">1</span>]);</span><br><span class="line">                System.out.println(<span class="string">&quot;单价：&quot;</span> + 表头[i][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 显示表格(String[][] 表头) &#123;</span><br><span class="line">        <span class="comment">// TODO 显示表格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; 表头.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; 表头[i].length; j++) &#123;</span><br><span class="line">                System.out.print(表头[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                <span class="comment">// System.out.println();</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>重构,代码</tag>
      </tags>
  </entry>
</search>
